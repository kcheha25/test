import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import tkinter as tk
from collections import defaultdict
import pandas as pd

# -------------------------
# Exemple de dataframe simulé
# -------------------------
data = {
    "pics": [
        {"12.4": ["A"], "25.3": ["B"], "55.1": ["A"]},
        {"22.1": ["B"], "45.2": ["C"], "80.3": ["A"]},
        {"130.4": ["C"], "140.3": ["B"], "110.0": ["A"]},
    ]
}
df = pd.DataFrame(data)

# -------------------------
# Extraction des données
# -------------------------
pic_times = []
component_names = []
component_to_times = defaultdict(list)

for _, row in df.iterrows():
    for pic_time_str, data in row["pics"].items():
        pic_time = float(pic_time_str)
        if pic_time <= 150:
            comp_name = data[0]
            pic_times.append(pic_time)
            component_names.append(comp_name)
            component_to_times[comp_name].append(pic_time)

component_intervals = {
    comp: (min(times), max(times)) for comp, times in component_to_times.items()
}

# -------------------------
# Interface Tkinter
# -------------------------
root = tk.Tk()
root.title("Visualisation des pics chromatographiques")

# Créer une figure matplotlib
fig, ax = plt.subplots(figsize=(10, 6))
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack(fill=tk.BOTH, expand=1)
toolbar = NavigationToolbar2Tk(canvas, root)
toolbar.update()
toolbar.pack()

# -------------------------
# Tracé + sauvegarde des barres verticales
# -------------------------
vertical_bars = []  # x, y_bottom, y_top, component_name

def plot_intervals(ax):
    ax.clear()
    vertical_bars.clear()

    # Points des pics
    ax.scatter(pic_times, [0.5]*len(pic_times), label="Pic Times", color="blue", s=30)

    y_bottom = 0.7
    y_top = 0.9

    for i, (comp, (min_time, max_time)) in enumerate(component_intervals.items()):
        color = plt.cm.tab10(i % 10)

        # Rectangle ouvert (3 côtés)
        ax.plot([min_time, max_time], [y_top, y_top], color=color, linewidth=2)
        ax.plot([min_time, min_time], [y_bottom, y_top], color=color, linestyle='--')
        ax.plot([max_time, max_time], [y_bottom, y_top], color=color, linestyle='--')

        # Sauvegarder barres verticales
        vertical_bars.append((min_time, y_bottom, y_top, comp))
        vertical_bars.append((max_time, y_bottom, y_top, comp))

    ax.set_ylim(0, 1.2)
    ax.set_xlabel("Temps de rétention")
    ax.set_ylabel("Intensité relative")
    ax.set_title("Survolez une barre verticale pour voir le composant")
    ax.grid(True)

plot_intervals(ax)

# -------------------------
# Infobulle (tooltip)
# -------------------------
tooltip = ax.annotate("", xy=(0,0), xytext=(10,10), textcoords="offset points",
                      bbox=dict(boxstyle="round", fc="w"),
                      arrowprops=dict(arrowstyle="->"))
tooltip.set_visible(False)

def on_motion(event):
    if event.inaxes != ax or event.xdata is None or event.ydata is None:
        tooltip.set_visible(False)
        canvas.draw_idle()
        return

    tolerance = 0.5  # tolérance en x
    for (x, y1, y2, name) in vertical_bars:
        if abs(event.xdata - x) < tolerance and y1 <= event.ydata <= y2:
            tooltip.xy = (event.xdata, event.ydata)
            tooltip.set_text(name)
            tooltip.set_visible(True)
            canvas.draw_idle()
            return

    tooltip.set_visible(False)
    canvas.draw_idle()

canvas.mpl_connect("motion_notify_event", on_motion)
canvas.draw()
root.mainloop()
