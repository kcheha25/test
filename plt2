import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import tkinter as tk
from collections import defaultdict
import pandas as pd

# -------------------------
# Données simulées
# -------------------------
data = {
    "pics": [
        {"12.4": ["A"], "25.3": ["B"], "55.1": ["A"]},
        {"22.1": ["B"], "45.2": ["C"], "80.3": ["A"]},
        {"130.4": ["C"], "140.3": ["B"], "110.0": ["A"]},
    ]
}
df = pd.DataFrame(data)

# -------------------------
# Préparation des intervalles
# -------------------------
pic_times = []
component_names = []
component_to_times = defaultdict(list)

for _, row in df.iterrows():
    for pic_time_str, data in row["pics"].items():
        pic_time = float(pic_time_str)
        if pic_time <= 150:
            comp_name = data[0]
            pic_times.append(pic_time)
            component_names.append(comp_name)
            component_to_times[comp_name].append(pic_time)

component_intervals = {
    comp: (min(times), max(times)) for comp, times in component_to_times.items()
}

# -------------------------
# Tkinter GUI
# -------------------------
root = tk.Tk()
root.title("Visualisation interactive des composants")

fig, ax = plt.subplots(figsize=(10, 6))
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack(fill=tk.BOTH, expand=1)
toolbar = NavigationToolbar2Tk(canvas, root)
toolbar.update()
toolbar.pack()

# -------------------------
# Tracé des intervalles
# -------------------------
y_top = 0.9
y_bottom = 0.7
rect_patches = []  # Pour stocker les positions et noms

def plot_intervals():
    ax.clear()
    ax.scatter(pic_times, [0.5]*len(pic_times), label="Pic Times", color="blue", s=30)

    for i, (comp, (min_time, max_time)) in enumerate(component_intervals.items()):
        color = plt.cm.tab10(i % 10)

        # Tracer en pointillés
        ax.plot([min_time, min_time], [y_bottom, y_top], color=color, linestyle='--')  # gauche
        ax.plot([max_time, max_time], [y_bottom, y_top], color=color, linestyle='--')  # droite
        ax.plot([min_time, max_time], [y_top, y_top], color=color, linestyle='--')    # haut

        rect_patches.append((min_time, max_time, y_bottom, y_top, comp))

    ax.set_ylim(0, 1.2)
    ax.set_xlabel("Temps de rétention")
    ax.set_ylabel("Intensité relative")
    ax.set_title("Survolez un rectangle pour voir le composant")
    ax.grid(True)

plot_intervals()

# -------------------------
# Infobulle (tooltip)
# -------------------------
tooltip = ax.annotate("", xy=(0,0), xytext=(10,10), textcoords="offset points",
                      bbox=dict(boxstyle="round", fc="w"),
                      arrowprops=dict(arrowstyle="->"))
tooltip.set_visible(False)

def on_motion(event):
    if event.inaxes != ax or event.xdata is None or event.ydata is None:
        tooltip.set_visible(False)
        canvas.draw_idle()
        return

    for (x_min, x_max, y_min, y_max, comp_name) in rect_patches:
        if x_min <= event.xdata <= x_max and y_min <= event.ydata <= y_max:
            tooltip.xy = (event.xdata, event.ydata)
            tooltip.set_text(comp_name)
            tooltip.set_visible(True)
            canvas.draw_idle()
            return

    tooltip.set_visible(False)
    canvas.draw_idle()

# Connecter l'événement
canvas.mpl_connect("motion_notify_event", on_motion)

canvas.draw()
root.mainloop()
