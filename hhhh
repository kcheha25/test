import pandas as pd
import numpy as np
from collections import defaultdict
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# Charger Excel
excel_path = "composants_ref.xlsx"
df_excel = pd.read_excel(excel_path)

# Nettoyer les noms
df_excel['Composant'] = df_excel['Composant'].astype(str).str.strip().str.upper()

# Ajouter des suffixes si noms dupliqués
name_counts = defaultdict(int)
new_names = []

for name in df_excel['Composant']:
    name_counts[name] += 1
    suffixed_name = f"{name}_{name_counts[name]}"
    new_names.append(suffixed_name)

df_excel['Composant_Suffixe'] = new_names

# Valeur expérimentale mesurée pour TOLUENE
tol_value = 85.0

# Chercher la première occurrence de TOLUENE dans le fichier original (sans suffixe)
tol_index = df_excel[df_excel['Composant'] == "TOLUENE"].index[0]
toluene_ref_time = df_excel.loc[tol_index, 'Temps de rétention']

# Calcul du delta
delta = tol_value - toluene_ref_time

# Ajustement
df_excel['AdjustedTime'] = df_excel['Temps de rétention'] + delta
component_names = df_excel['Composant_Suffixe'].tolist()
X = df_excel['AdjustedTime'].values.reshape(-1, 1) / 150.0

nbrs = NearestNeighbors(n_neighbors=1)
nbrs.fit(X)

component_assigned_flags = {name: False for name in component_names}  # pour ne pas attribuer deux fois
detected_peaks = []
threshold = 0.4
i = 3

plt.figure(figsize=(12, 5))
plt.plot(x_full, y_full, label='Signal')
plt.title("Attribution des pics avec noms suffixés")

while i < len(probs_full) - 3:
    if probs_full[i] > threshold:
        window = probs_full[i - 3:i + 4]
        if np.any(window > threshold):
            idx_window = np.arange(i - 3, i + 4)
            idx_max_intensity = idx_window[np.argmax(y_full[idx_window])]
            detected_peaks.append(idx_max_intensity)

            # Temps de pic détecté
            pic_time_detected = x_full[idx_max_intensity]
            pic_time_normalized = pic_time_detected / 150.0

            # Trouver le composant le plus proche non encore attribué
            _, indices = nbrs.kneighbors([[pic_time_normalized]])
            for idx in indices[0]:
                proposed_name = component_names[idx]
                if not component_assigned_flags[proposed_name]:
                    component_assigned_flags[proposed_name] = True
                    break
            else:
                proposed_name = "UNKNOWN"

            # Affichage
            plt.text(
                pic_time_detected,
                y_full[idx_max_intensity] + 0.02 * max(y_full),
                proposed_name,
                color='red',
                fontsize=9,
                ha='center',
            )

            i += 4
        else:
            i += 1
    else:
        i += 1

plt.xlabel("Temps (min)")
plt.ylabel("Intensité")
plt.legend()
plt.grid(True)
plt.show()
