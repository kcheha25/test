import pandas as pd
from collections import defaultdict

# Exemple
data = {
    "pics": [
        {"12.4": ["A"], "25.3": ["B"], "55.1": ["C"]},     # Chrom 0
        {"11.1": ["A"], "26.8": ["B"], "57.7": ["C"]},     # Chrom 1 (identique √† 0)
        {"10.0": ["B"], "22.0": ["C"], "33.0": ["A"]},     # Chrom 2 (m√™me noms mais ordre diff√©rent)
        {"8.0": ["A"], "30.0": ["B"]},                     # Chrom 3 (diff√©rent)
        {"15.0": ["A"], "25.0": ["B"], "55.0": ["C"]},     # Chrom 4 (identique √† 0 et 1)
    ]
}
df = pd.DataFrame(data)

# Extraire les s√©quences ordonn√©es des noms de pics pour chaque chromatogramme
def extract_ordered_component_sequence(pic_dict):
    sorted_items = sorted(pic_dict.items(), key=lambda x: float(x[0]))  # tri√© par temps
    return tuple([v[0] for _, v in sorted_items if float(_) <= 150])  # tuple immuable

# Dictionnaire de regroupement : cl√© = s√©quence, valeur = indices
sequence_to_indices = defaultdict(list)

for idx, row in df.iterrows():
    sequence = extract_ordered_component_sequence(row["pics"])
    sequence_to_indices[sequence].append(idx)

# Affichage
print("Groupes de chromatogrammes avec m√™me s√©quence ordonn√©e de noms de composants :\n")
for seq, indices in sequence_to_indices.items():
    if len(indices) > 1:
        print(f"S√©quence {seq} ‚Üí Chromatogrammes {indices}")


import pandas as pd
from collections import defaultdict
import matplotlib.pyplot as plt
import itertools

# Exemple de donn√©es simul√©es
data = {
    "pics": [
        {"12.4": ["A"], "25.3": ["B"], "55.1": ["C"]},     # Chrom 0
        {"11.1": ["A"], "26.8": ["B"], "57.7": ["C"]},     # Chrom 1 ‚Üí m√™me s√©quence
        {"10.0": ["B"], "22.0": ["C"], "33.0": ["A"]},     # Chrom 2 ‚Üí m√™me longueur mais ordre diff√©rent
        {"8.0": ["A"], "30.0": ["B"]},                     # Chrom 3 ‚Üí 2 pics
        {"15.0": ["A"], "25.0": ["B"], "55.0": ["C"]},     # Chrom 4 ‚Üí m√™me s√©quence
    ]
}
df = pd.DataFrame(data)

# 1. Extraire les s√©quences ordonn√©es et les temps correspondants
def extract_sequence_and_times(row):
    sorted_items = sorted(row["pics"].items(), key=lambda x: float(x[0]))
    names = []
    times = []
    for time_str, val in sorted_items:
        time = float(time_str)
        if time <= 150:
            names.append(val[0])
            times.append(time)
    return tuple(names), times

# Stockage
sequence_to_chroms = defaultdict(list)
chrom_to_times = {}

for idx, row in df.iterrows():
    sequence, times = extract_sequence_and_times(row)
    if len(sequence) == len(times):  # s√©curit√©
        sequence_to_chroms[sequence].append(idx)
        chrom_to_times[idx] = times

# 2. Comparer uniquement les chromatogrammes avec EXACTEMENT la m√™me s√©quence (ordre et nombre)
for sequence, chrom_indices in sequence_to_chroms.items():
    if len(chrom_indices) < 2:
        continue

    print(f"\nS√©quence {sequence} : {chrom_indices}")

    # 3. Tracer pour chaque couple
    for i, j in itertools.combinations(chrom_indices, 2):
        x = chrom_to_times[i]
        y = chrom_to_times[j]

        if len(x) != len(y):
            continue  # on saute les tailles diff√©rentes par s√©curit√©

        plt.figure(figsize=(5, 5))
        plt.scatter(x, y, color='blue')
        for xi, yi, label in zip(x, y, sequence):
            plt.text(xi, yi, label, fontsize=9, ha='right', va='bottom')

        plt.title(f"Nuage de points : Chrom {i} vs Chrom {j}")
        plt.xlabel(f"Temps r√©tention Chrom {i}")
        plt.ylabel(f"Temps r√©tention Chrom {j}")
        plt.grid(True)
        plt.axis("equal")
        plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Supposons que df est d√©j√† charg√© avec tes donn√©es r√©elles
# Exemple : df = pd.read_json("mon_fichier.json")

# --- √âtape 1 : Extraire les temps par nom de composant ---
def get_component_to_time(row):
    component_to_time = {}
    for time_str, data in row["pics"].items():
        time = float(time_str)
        if time <= 150:
            name = data[0]
            component_to_time[name] = time
    return component_to_time

# Choisir les indices des deux chromatogrammes √† comparer
i, j = 81, 89

# S√©curit√© : v√©rifier les indices
if i not in df.index or j not in df.index:
    print(f"Les indices {i} ou {j} ne sont pas valides dans le DataFrame.")
else:
    comp_time_i = get_component_to_time(df.loc[i])
    comp_time_j = get_component_to_time(df.loc[j])

    # Intersection des noms de composants pr√©sents dans les deux chromatogrammes
    common_names = set(comp_time_i.keys()) & set(comp_time_j.keys())

    if not common_names:
        print(f"Aucun pic en commun entre les chromatogrammes {i} et {j}.")
    else:
        # Cr√©er les listes x et y √† partir des noms communs
        x = [comp_time_i[name] for name in common_names]
        y = [comp_time_j[name] for name in common_names]

        # Affichage du nuage de points
        plt.figure(figsize=(6, 6))
        plt.scatter(x, y, color='green')

        for xi, yi, label in zip(x, y, common_names):
            plt.text(xi, yi, label, fontsize=9, ha='right', va='bottom')

        plt.title(f"Nuage de points : Chrom {i} vs Chrom {j}")
        plt.xlabel(f"Temps de r√©tention Chrom {i}")
        plt.ylabel(f"Temps de r√©tention Chrom {j}")
        plt.grid(True)
        plt.axis("equal")
        plt.show()
import matplotlib.pyplot as plt 
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import tkinter as tk
import pandas as pd
import numpy as np

data = {
    "pics": [
        {"12.4": ["A"], "25.3": ["B"], "55.1": ["A"]},
        {"22.1": ["B"], "45.2": ["C"], "80.3": ["A"]},
        {"130.4": ["C"], "140.3": ["B"], "110.0": ["A"]},
    ],
    "x": [np.linspace(0, 150, 300)] * 3,
    "y": [
        np.sin(np.linspace(0, 15, 300)) + np.random.normal(0, 0.05, 300),
        np.cos(np.linspace(0, 10, 300)) + np.random.normal(0, 0.05, 300),
        np.sin(np.linspace(0, 7, 300)) + np.random.normal(0, 0.05, 300),
    ]
}
for i in range(3, 300):
    data["x"].append(np.linspace(0, 150, 300))
    data["y"].append(np.sin(np.linspace(0, 15 + i*0.05, 300)) + np.random.normal(0, 0.05, 300))

df = pd.DataFrame(data)

root = tk.Tk()
root.title("Visualisation des chromatogrammes")

fig, ax = plt.subplots(figsize=(10, 6))
canvas = FigureCanvasTkAgg(fig, master=root)
canvas_widget = canvas.get_tk_widget()
canvas_widget.pack(fill=tk.BOTH, expand=1)
toolbar = NavigationToolbar2Tk(canvas, root)
toolbar.update()
toolbar.pack()

cmap = plt.cm.viridis
norm = plt.Normalize(vmin=0, vmax=len(df)-1)
lines = []

for i, row in df.iterrows():
    x = row["x"]
    y = row["y"]
    color = cmap(norm(i))
    line, = ax.plot(x, y, color=color, linewidth=1, picker=5)
    line.chrom_index = i + 1
    lines.append(line)

text_annotation = ax.annotate("", xy=(0,0), xytext=(15,15),
    textcoords="offset points", bbox=dict(boxstyle="round", fc="w"),
    arrowprops=dict(arrowstyle="->"))
text_annotation.set_visible(False)

def on_motion(event):
    if not event.inaxes:
        text_annotation.set_visible(False)
        canvas.draw_idle()
        return

    x_mouse, y_mouse = event.xdata, event.ydata
    tolerance = 0.1

    for line in lines:
        xdata, ydata = line.get_xdata(), line.get_ydata()
        distances = np.hypot(xdata - x_mouse, ydata - y_mouse)
        if np.min(distances) < tolerance:
            idx = np.argmin(distances)
            text_annotation.xy = (xdata[idx], ydata[idx])
            text_annotation.set_text(f"Chromatogramme {line.chrom_index}")
            text_annotation.set_visible(True)
            canvas.draw_idle()
            return

    text_annotation.set_visible(False)
    canvas.draw_idle()

canvas.mpl_connect("motion_notify_event", on_motion)

ax.set_xlabel("Temps de r√©tention")
ax.set_ylabel("Intensit√©")
ax.set_title("Superposition des chromatogrammes")
ax.grid(True)

canvas.draw()
root.mainloop()



import pandas as pd
from collections import defaultdict

# Exemple : df = pd.read_json("ton_fichier.json")

# √âtape 1 : Recenser les composants par chromatogramme
component_to_chroms = defaultdict(set)
component_to_times = defaultdict(list)

for idx, row in df.iterrows():
    for time_str, data in row["pics"].items():
        time = float(time_str)
        if time <= 150:
            comp_name = data[0]
            component_to_chroms[comp_name].add(idx)
            component_to_times[comp_name].append(time)

# √âtape 2 : Conserver uniquement les composants pr√©sents dans TOUS les chromatogrammes
total_chroms = len(df)
present_in_all = {
    comp for comp, chrom_idxs in component_to_chroms.items()
    if len(chrom_idxs) == total_chroms
}

print(f"\nüß™ Composants pr√©sents dans TOUS les {total_chroms} chromatogrammes :")
print(sorted(present_in_all))

# √âtape 3 : Construire les intervalles [min, max] pour chaque composant
component_intervals = {
    comp: (min(times), max(times)) for comp, times in component_to_times.items()
}

# √âtape 4 : V√©rifier les chevauchements d'intervalles
def overlaps(a, b):
    return not (a[1] < b[0] or b[1] < a[0])

non_overlapping = []

for comp1 in present_in_all:
    interval1 = component_intervals[comp1]
    has_overlap = False
    for comp2, interval2 in component_intervals.items():
        if comp1 == comp2:
            continue
        if overlaps(interval1, interval2):
            has_overlap = True
            break
    if not has_overlap:
        non_overlapping.append(comp1)

print("\n‚úÖ Composants pr√©sents dans tous les chromatogrammes SANS chevauchement avec d'autres :")
print(sorted(non_overlapping))
