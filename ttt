import pandas as pd
import numpy as np
import cv2
import os

# üîπ Charger les donn√©es JSON en DataFrame
file_path = "chromatogrammes.json"  # Remplace par ton fichier r√©el
df = pd.read_json(file_path)

# üîπ Suppression des chromatogrammes sans pics
df = df.dropna(subset=['pics'])

# üîπ Suppression des chromatogrammes qui ne font pas exactement 71 840 points
df = df[df["x"].apply(len) == 71840]

# üîπ R√©pertoire pour enregistrer les images et annotations
output_dir = "output_chromatograms"
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# üîπ Fonction pour cr√©er l'image de chromatogramme avec courbe et annotations
def create_chromatogram_image(data, pics, img_width=71840, img_height=500):
    # Cr√©ation d'une image vide (noire)
    img = np.zeros((img_height, img_width, 3), dtype=np.uint8)

    # Tracer la courbe (relier les points)
    for i in range(1, len(data)):
        x1, y1 = data[i - 1]
        x2, y2 = data[i]
        
        # Normalisation de l'intensit√© pour ajuster la hauteur des points
        y1_pos = int(img_height - (y1 / np.max(data[:, 1]) * img_height))
        y2_pos = int(img_height - (y2 / np.max(data[:, 1]) * img_height))
        
        cv2.line(img, (int(x1), y1_pos), (int(x2), y2_pos), (255, 255, 255), 1)

    # Ajouter les bounding boxes sur les pics
    annotations = []
    for pic_id, data_pic in pics.items():
        nom_composant = data_pic[0]
        borne_avant = int(data_pic[1])
        borne_apres = int(data_pic[2])

        # Cr√©er une bounding box (rectangle) autour du pic
        cv2.rectangle(img, (borne_avant, 0), (borne_apres, img_height), (0, 255, 0), 2)

        # Ajouter l'annotation au format YOLO
        # Le centre de la bo√Æte (borne avant et apr√®s) et la largeur
        center_x = (borne_avant + borne_apres) / 2 / img_width
        width = (borne_apres - borne_avant) / img_width
        annotations.append(f"0 {center_x} 0.5 {width} 1")  # Classe 0 par d√©faut (peut √™tre chang√© si n√©cessaire)

    return img, annotations

# üîπ Boucle pour traiter chaque chromatogramme
for idx, row in df.iterrows():
    # Donn√©es X et Y pour chaque chromatogramme
    data = np.column_stack((row["x"], row["y"]))
    
    # Pics associ√©s √† ce chromatogramme
    pics = row["pics"]

    # Cr√©ation de l'image (courbe) et des annotations
    img, annotations = create_chromatogram_image(data, pics)

    # Sauvegarder l'image
    img_filename = os.path.join(output_dir, f"chromatogramme_{idx}.png")
    cv2.imwrite(img_filename, img)

    # Sauvegarder les annotations dans un fichier YOLO
    annotations_filename = os.path.join(output_dir, f"chromatogramme_{idx}.txt")
    with open(annotations_filename, "w") as f:
        for annotation in annotations:
            f.write(f"{annotation}\n")

    print(f"Image et annotations sauvegard√©es pour chromatogramme {idx}")
