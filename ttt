max_k = 20  # Par exemple, jusqu'à 20 clusters
sil_scores = []

# Calcul du silhouette score pour chaque k
for k in range(2, max_k + 1):  # On commence à 2 car silhouette score nécessite au moins 2 clusters
    kmeans = KMeans(n_clusters=k, random_state=42).fit(data)
    score = silhouette_score(data, kmeans.labels_)
    sil_scores.append(score)

# Tracer la courbe du silhouette score
plt.figure(figsize=(10, 6))
plt.plot(range(2, max_k + 1), sil_scores, marker='o', linestyle='--')
plt.title("Silhouette Score en fonction du nombre de clusters")
plt.xlabel("Nombre de clusters")
plt.ylabel("Silhouette Score")
plt.grid()
plt.show()

# Détecter automatiquement le meilleur nombre de clusters en fonction du silhouette score
# Choisir le k avec le plus grand silhouette score, ce qui correspond à la meilleure séparation
optimal_k = np.argmax(sil_scores) + 2  # Ajouter 2 car on commence à k = 2

print(f"Le nombre optimal de clusters pour la meilleure séparation est : {optimal_k}")