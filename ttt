class IPA_LSTM_Variable(tf.keras.Model):
    def __init__(self, seed_value, regularization_factor, dropout_rate=0.2, lstm_units=64):
        super(IPA_LSTM_Variable, self).__init__()

        # Partie IPA pour extraire les caractéristiques
        self.stem = tf.keras.Sequential([
            BasicConv1D(filters=16, kernel_size=3, strides=2, kernel_regularizer=L2(regularization_factor), kernel_initializer=initializers.HeNormal(seed_value)),
            BasicConv1D(filters=16, kernel_size=3, kernel_regularizer=L2(regularization_factor), kernel_initializer=initializers.HeNormal(seed_value)),
            BasicConv1D(filters=16, kernel_size=3, kernel_regularizer=L2(regularization_factor), kernel_initializer=initializers.HeNormal(seed_value)),
        ])

        self.module_35x35 = Module_35x35(in_channels=32, regularization_factor=regularization_factor, seed_value=seed_value)
        self.flatten = Flatten()
        self.dropout = Dropout(rate=dropout_rate)

        # LSTM pour gérer les séquences de longueur variable
        self.lstm = tf.keras.layers.LSTM(lstm_units, return_sequences=True)

        # Nouvelle couche pour réduire la dimension de la sortie LSTM
        self.reduce_dim = tf.keras.layers.Dense(462, activation=None)  # Réduit à 462, comme la taille de y_bounds

        # Sortie pour les différentes informations sur les pics
        self.height_regressor = Dense(1)  # Prédiction de la hauteur du pic
        self.bounds_regressor = Dense(2)  # Prédiction des bornes (avant, après)
        self.component_classifier = Dense(1)  # Prédiction du composant (régression ou classification)

    def call(self, x):
        out = self.stem(x)
        out = self.module_35x35(out)
        out = self.flatten(out)
        out = self.dropout(out)

        # Sortie LSTM pour générer les infos des pics
        out = self.lstm(out)

        # Réduire la sortie LSTM pour correspondre à la longueur de y_bounds (462)
        out = self.reduce_dim(out)

        height_output = self.height_regressor(out)  # Hauteur du pic
        bounds_output = self.bounds_regressor(out)  # Bornes d'intégration (avant, après)
        component_output = self.component_classifier(out)  # Nom du composant

        return height_output, bounds_output, component_output
