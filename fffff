# Visualisation des groupes avec des couleurs distinctes
def visualize_groups_with_overlay(image, outputs, feuillets, labels):
    # Créer un Visualizer pour afficher les résultats sur l'image
    v = Visualizer(image[:, :, ::-1], metadata=None, scale=1.0)
    
    # Créer un tableau de couleurs pour chaque groupe
    unique_labels = np.unique(labels)
    colors = [tuple(np.random.rand(3)) for _ in unique_labels]  # Couleurs aléatoires pour chaque groupe
    
    # Ajouter les instances avec les couleurs de groupe dans l'overlay
    instances = outputs['instances']
    boxes = instances.pred_boxes  # Boîtes englobantes sous forme d'objet Boxes
    
    # Boucler sur chaque instance et assigner une couleur par groupe
    group_masks = []
    for label in unique_labels:
        mask = []
        group = np.where(labels == label)[0]
        for idx in group:
            # Vérifier si l'index est valide
            if idx < len(instances):
                # Récupérer la boîte de chaque feuillet du groupe
                bbox = boxes[idx].tensor.cpu().numpy()  # Extraire la boîte
                mask.append(bbox)
        
        # Dessiner l'overlay avec la couleur associée au groupe
        if mask:
            v.overlay_instances(boxes=np.array(mask), color=colors[label], alpha=0.5)
    
    # Afficher l'image avec l'overlay des groupes
    result_image = v.get_output().get_image()
    plt.figure(figsize=(10, 10))
    plt.imshow(result_image)
    plt.axis('off')
    plt.show()
