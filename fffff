# Générer des couleurs distinctes en utilisant un espace HSV
def generate_unique_colors(num_colors):
    colors = []
    for i in range(num_colors):
        # Utilisation de l'espace HSV pour générer une couleur distincte
        hue = i / num_colors  # Espacement uniforme des teintes
        color = plt.cm.hsv(hue)  # Génère une couleur en HSV
        colors.append(tuple(int(c * 255) for c in color[:3]))  # Convertir en RGB avec une gamme [0, 255]
    return colors

# Exemple de génération de couleurs pour les groupes
def visualize_groups_with_overlay(image, outputs, feuillets, labels):
    # Extraire les instances et leur masque
    instances = outputs['instances']
    num_groups = len(set(labels))  # Nombre de groupes
    colors = generate_unique_colors(num_groups)  # Générer des couleurs uniques pour chaque groupe
    
    # Initialiser une liste de couleurs pour chaque feuillet
    group_colors = []
    
    # Assigner une couleur unique à chaque groupe
    for label in labels:
        group_colors.append(colors[label])
    
    # Visualiser les groupes avec des couleurs uniques
    v = Visualizer(image[:, :, ::-1], metadata=None, scale=1.2)
    v.overlay_instances(masks=instances.pred_masks, assigned_colors=group_colors)
    result_image = v.get_output().get_image()
    
    plt.imshow(result_image)
    plt.axis('off')
    plt.show()