def custom_distance(feuillets, distance_threshold=50, angle_threshold=15):
    n = len(feuillets)
    graph = nx.Graph()  # Créer un graphe vide
    
    # Ajouter un nœud pour chaque feuillet
    for i in range(n):
        graph.add_node(i, data=feuillets[i])

    # Ajouter des arêtes entre les nœuds si les feuillets sont proches (soit côte à côte, soit en dessous)
    for i in range(n):
        for j in range(i + 1, n):
            # Calcul de la distance spatiale
            dx = feuillets[i][0] - feuillets[j][0]
            dy = feuillets[i][1] - feuillets[j][1]
            spatial_distance = np.sqrt(dx**2 + dy**2)

            # Vérifier si les feuillets sont soit côte à côte, soit en dessous
            if (abs(dx) <= distance_threshold and abs(dy) <= distance_threshold):  # Côté à côté ou en dessous
                # Calcul de la différence d'orientation
                orientation_diff = abs(feuillets[i][2] - feuillets[j][2])
                orientation_diff = min(orientation_diff, 360 - orientation_diff)  # Modulo 360

                # Si les critères d'orientation sont satisfaits, ajouter une arête
                if orientation_diff <= angle_threshold:
                    graph.add_edge(i, j, weight=spatial_distance)
    
    return graph