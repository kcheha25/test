def extract_feuillets(outputs):
    instances = outputs['instances']
    masks = instances.pred_masks.cpu().numpy()
    feuillets = []
    
    for i in range(len(instances)):
        # Obtenir la boîte englobante
        bbox = instances.pred_boxes.tensor[i].cpu().numpy().flatten()
        center_x, center_y = (bbox[0] + bbox[2]) / 2, (bbox[1] + bbox[3]) / 2
        angle = get_angle(bbox[0], bbox[1], bbox[2], bbox[3])
        
        # Calculer la longueur via les masques et `regionprops`
        labeled_mask = label(masks[i].astype(np.uint8))
        regions = regionprops(labeled_mask)
        if len(regions) > 0:
            length = np.sqrt(regions[0].area)  # Longueur basée sur la région principale
        else:
            length = 0  # Longueur par défaut si aucune région n'est trouvée

        # Ajouter les propriétés du feuillet
        feuillets.append((center_x, center_y, angle, length))
    
    return feuillets
def plot_group_lengths(groups, feuillets):
    group_lengths = []
    group_sizes = []

    for group in groups:
        group_lengths.append(np.mean([feuillets[i][3] for i in group]))  # Index 3 pour la longueur
        group_sizes.append(len(group))

    plt.figure(figsize=(8, 6))
    plt.scatter(group_sizes, group_lengths, c='blue', alpha=0.7)
    plt.xlabel("Nombre de feuillets empilés (par groupe)")
    plt.ylabel("Longueur moyenne des feuillets (nm)")
    plt.title("Longueur moyenne des feuillets en fonction du nombre de feuillets empilés")
    plt.grid(True)
    plt.show()

def main(image_path, predictor):
    # 1. Effectuer l'inférence
    image = cv2.imread(image_path)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    outputs = predictor(image)

    # 2. Extraire les feuillets et leurs propriétés
    feuillets = extract_feuillets(outputs)

    # 3. Créer un graphe de proximité
    graph = custom_distance(feuillets)

    # 4. Trouver les composantes connexes
    components = get_connected_components(graph)

    # 5. Visualiser les feuillets regroupés
    visualize_groups_with_overlay(image, outputs, feuillets, components)

    # 6. Générer le graphique des longueurs moyennes
    plot_group_lengths(components, feuillets)
