pip install pyinstaller
pyinstaller --onefile app.py

pyinstaller --onefile --add-data "templates;templates" --add-data "static;static" app.py

import os, sys
from flask import Flask

# Trouver le bon chemin des fichiers (compatibilit√© PyInstaller)
if getattr(sys, 'frozen', False):  # Si lanc√© depuis l'ex√©cutable PyInstaller
    basedir = sys._MEIPASS
else:
    basedir = os.path.dirname(os.path.abspath(__file__))

app = Flask(__name__, 
            template_folder=os.path.join(basedir, "templates"),
            static_folder=os.path.join(basedir, "static"))

@app.route("/")
def home():
    return "Hello Flask inclus dans EXE !"

if __name__ == "__main__":
    app.run()


pyinstaller --onefile ^
  --add-data "templates;templates" ^
  --add-data "static;static" ^
  --add-data "models;models" ^
  app.py

import os, sys
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
import torch

# Chemin racine (normal ou compil√©)
if getattr(sys, 'frozen', False):
    basedir = sys._MEIPASS
else:
    basedir = os.path.dirname(os.path.abspath(__file__))

# Exemple Detectron2
cfg = get_cfg()
cfg.merge_from_file(os.path.join(basedir, "models", "config.yaml"))
cfg.MODEL.WEIGHTS = os.path.join(basedir, "models", "detectron2_model.pth")

predictor = DefaultPredictor(cfg)


import os
import webbrowser
from flask import Flask

BASEDIR = os.path.dirname(os.path.abspath(__file__))

app = Flask(
    __name__,
    template_folder=os.path.join(BASEDIR, "templates"),
    static_folder=os.path.join(BASEDIR, "static")
)

@app.route("/")
def home():
    return "Hello depuis l‚ÄôEXE avec Flask üöÄ"

if __name__ == "__main__":
    # Ouvrir automatiquement le navigateur
    port = 5000
    url = f"http://127.0.0.1:{port}/"
    webbrowser.open(url)  # ouvre dans le navigateur par d√©faut

    # Lancer le serveur Flask
    app.run(port=port)

pyinstaller --onefile --noconsole app.py


valeur_vv = None

with open("data.txt", "r", encoding="utf-8") as f:
    for ligne in f:
        if ligne.strip().startswith("Vv"):
            # R√©cup√©rer la partie apr√®s les deux-points
            valeur_vv = ligne.split(":", 1)[1].strip()
            # Remplacer la virgule par un point pour conversion
            valeur_vv = float(valeur_vv.replace(",", "."))
            break

print("Valeur Vv =", valeur_vv)

import os
import shutil
from flask import Flask, jsonify

app = Flask(__name__)

# Dossier source et cible
SOURCE_FOLDER = "xml_source"
TARGET_FOLDER = "xml_target"

# Chemins vers les ex√©cutables
EXE_MATRICE = r"C:\chemin\vers\programme1.exe"
EXE_AUTRE   = r"C:\chemin\vers\programme2.exe"

@app.route("/replace_xml", methods=["POST"])
def replace_xml():
    if not os.path.exists(SOURCE_FOLDER):
        return jsonify({"error": "Dossier source introuvable"}), 400
    if not os.path.exists(TARGET_FOLDER):
        os.makedirs(TARGET_FOLDER)

    replaced_files = []
    for filename in os.listdir(SOURCE_FOLDER):
        if filename.lower().endswith(".xml"):
            src_path = os.path.join(SOURCE_FOLDER, filename)
            dst_path = os.path.join(TARGET_FOLDER, filename)

            # Copier avec remplacement
            shutil.copy2(src_path, dst_path)
            replaced_files.append(filename)

            # V√©rifier le nom du fichier et lancer l'exe correspondant
            try:
                if filename.lower() == "matrice.xml":
                    os.startfile(EXE_MATRICE)
                else:
                    os.startfile(EXE_AUTRE)
            except Exception as e:
                return jsonify({
                    "error": f"Erreur lors du lancement de l'ex√©cutable pour {filename} : {str(e)}"
                }), 500

    if not replaced_files:
        return jsonify({"message": "Aucun fichier XML trouv√© dans le dossier source."})

    return jsonify({
        "message": f"{len(replaced_files)} fichier(s) XML remplac√©(s)",
        "files": replaced_files
    })


if __name__ == "__main__":
    app.run(debug=True)


pyinstaller --onefile --noconsole ^
  --hidden-import=imageio.plugins.ffmpeg ^
  --hidden-import=imageio.plugins.pillow ^
  --hidden-import=imageio.plugins.tifffile ^
  ton_script.py

hiddenimports=['imageio.plugins.pillow', 'imageio.plugins.ffmpeg', 'imageio.plugins.tifffile']

pyinstaller ton_script.spec
