import xml.etree.ElementTree as ET

tree = ET.parse("fichier.xml")
root = tree.getroot()  

print("Racine:", root.tag)

for child in root:
    print("Balise:", child.tag, " | Attributs:", child.attrib, " | Texte:", child.text)

import xml.etree.ElementTree as ET

file_path = "fichier.xml"  
tree = ET.parse(file_path)
root = tree.getroot()

cox = root.find(".//cox")

if cox is not None:
    print("Avant modification :", cox.attrib)

    cox.set("value", "true")

    print("Après modification :", cox.attrib)

    tree.write(file_path, encoding="utf-8", xml_declaration=True)
else:
    print("Aucune balise <cox> trouvée")

import subprocess

exe_path = r"C:\chemin\vers\.exe"

subprocess.run([exe_path])


def calculate_semi_axes(T0, T1, T2, tol=1e-6):
    """Calcule les longueurs des demi-axes à partir des tenseurs centrés."""
    T2_centered = T2 - np.outer(T1, T1) / (2 * T0)

    eigenvalues, eigenvectors = np.linalg.eigh(T2_centered)

    kappa_3 = 4 * np.pi / 3
    factor = (2 * (3 + 2) / kappa_3) ** (1/(3 + 2))  # (10 / (4π/3))^(1/5)

    lambda1, lambda2, lambda3 = eigenvalues

    a1 = factor * (lambda1 ** 0.4) / ((lambda2 * lambda3) ** 0.1)
    a2 = factor * (lambda2 ** 0.4) / ((lambda1 * lambda3) ** 0.1)
    a3 = factor * (lambda3 ** 0.4) / ((lambda1 * lambda2) ** 0.1)

    semi_axes = np.array([a1, a2, a3])

    if abs(a1 - a2) < tol and abs(a1 - a3) > tol:
        semi_axes = np.array([a1, a3, a2])
    elif abs(a1 - a3) < tol and abs(a1 - a2) > tol:
        semi_axes = np.array([a1, a2, a3])
    elif abs(a2 - a3) < tol and abs(a2 - a1) > tol:
        semi_axes = np.array([a2, a1, a3])

    semi_axes = np.rint(semi_axes).astype(int)

    return semi_axes, eigenvectors


@app.route("/preview", methods=["POST"])
def preview():
    if "image" not in request.files:
        return jsonify({"error": "Aucune image reçue"}), 400

    file = request.files["image"]

    # Dossier de sauvegarde
    upload_dir = os.path.join("static", "upload")
    os.makedirs(upload_dir, exist_ok=True)

    # Extension originale
    ext = os.path.splitext(file.filename)[1].lower()

    # Sauvegarde image originale (.tif, .jpg, etc.)
    original_path = os.path.join(upload_dir, "uploadedimage" + ext)
    file.save(original_path)

    # Sauvegarde version PNG pour affichage
    png_path = os.path.join(upload_dir, "uploadedimage.png")
    img = cv2.imread(original_path, cv2.IMREAD_UNCHANGED)
    if img is None:
        return jsonify({"error": "Impossible de lire l’image"}), 400
    cv2.imwrite(png_path, img)

    return jsonify({
        "message": "Image sauvegardée",
        "uploaded": "/static/upload/uploadedimage.png"
    })

<div class="left-content left-right-main">
  <div class="main-block add-car">
    <h2 id="upload-title">Uploader une image</h2>

    <form id="preview-form" enctype="multipart/form-data">
      <div class="form-input">
        <label for="image-upload" id="custom-upload">
          <span>Choisir une image</span>
        </label>
        <input type="file" id="image-upload" name="image" accept="image/*,.tif,.tiff" required>
      </div>

      <!-- Aperçu de l’image uploadée -->
      <div id="preview-container" style="margin:15px 0;">
        <h3>Aperçu :</h3>
        <img id="preview-img" src="" alt="Pas d’image encore"
             style="max-width:100%; border:2px solid #ddd; display:none;">
      </div>

      <!-- Bouton lancer inference -->
      <button type="button" id="btn-infer">Lancer l’inférence</button>
    </form>
  </div>
</div>

<script>
  const formPreview = document.getElementById("preview-form");
  const previewImg = document.getElementById("preview-img");

  // Upload vers Flask pour sauvegarder (PNG + original)
  formPreview.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(formPreview);

    const response = await fetch("/preview", {
      method: "POST",
      body: formData
    });

    const data = await response.json();
    if (data.error) {
      alert("Erreur : " + data.error);
    } else {
      // Affiche image sauvegardée (toujours PNG pour compatibilité navigateur)
      previewImg.style.display = "block";
      previewImg.src = data.uploaded + "?t=" + new Date().getTime();
    }
  });

  // Aperçu immédiat (local, avant sauvegarde serveur)
  document.getElementById("image-upload").addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (file) {
      previewImg.style.display = "block";
      previewImg.src = URL.createObjectURL(file);
    }
  });
</script>
