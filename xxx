import xml.etree.ElementTree as ET

tree = ET.parse("fichier.xml")
root = tree.getroot()  

print("Racine:", root.tag)

for child in root:
    print("Balise:", child.tag, " | Attributs:", child.attrib, " | Texte:", child.text)

import xml.etree.ElementTree as ET

file_path = "fichier.xml"  
tree = ET.parse(file_path)
root = tree.getroot()

cox = root.find(".//cox")

if cox is not None:
    print("Avant modification :", cox.attrib)

    cox.set("value", "true")

    print("Apr√®s modification :", cox.attrib)

    tree.write(file_path, encoding="utf-8", xml_declaration=True)
else:
    print("Aucune balise <cox> trouv√©e")

import subprocess

exe_path = r"C:\chemin\vers\.exe"

subprocess.run([exe_path])


def calculate_semi_axes(T0, T1, T2, tol=1e-6):
    """Calcule les longueurs des demi-axes √† partir des tenseurs centr√©s."""
    T2_centered = T2 - np.outer(T1, T1) / (2 * T0)

    eigenvalues, eigenvectors = np.linalg.eigh(T2_centered)

    kappa_3 = 4 * np.pi / 3
    factor = (2 * (3 + 2) / kappa_3) ** (1/(3 + 2))  # (10 / (4œÄ/3))^(1/5)

    lambda1, lambda2, lambda3 = eigenvalues

    a1 = factor * (lambda1 ** 0.4) / ((lambda2 * lambda3) ** 0.1)
    a2 = factor * (lambda2 ** 0.4) / ((lambda1 * lambda3) ** 0.1)
    a3 = factor * (lambda3 ** 0.4) / ((lambda1 * lambda2) ** 0.1)

    semi_axes = np.array([a1, a2, a3])

    if abs(a1 - a2) < tol and abs(a1 - a3) > tol:
        semi_axes = np.array([a1, a3, a2])
    elif abs(a1 - a3) < tol and abs(a1 - a2) > tol:
        semi_axes = np.array([a1, a2, a3])
    elif abs(a2 - a3) < tol and abs(a2 - a1) > tol:
        semi_axes = np.array([a2, a1, a3])

    semi_axes = np.rint(semi_axes).astype(int)

    return semi_axes, eigenvectors


<div class="main-content">
  <!-- LEFT CONTENT -->
  <div class="left-content left-right-main">
    <div class="main-block add-car">
      <h2 id="upload-title">Uploader une image</h2>

      <form id="upload-form" enctype="multipart/form-data" method="POST" action="/upload">
        <!-- mod√®le choisi -->
        <div class="form-input">
          <label for="model">Mod√®le choisi :</label>
          <input type="text" id="model" name="model" readonly value="Aucun mod√®le">
        </div>

        <!-- zone upload -->
        <div class="form-input">
          <label for="image-upload" id="custom-upload">
            <img src="{{ url_for('static', filename='assets/upload-icon.png') }}" 
                 alt="Upload" class="small-icon">
            <span>Glissez-d√©posez une image<br>ou cliquez pour parcourir</span>
          </label>
          <input type="file" id="image-upload" name="image" accept="image/*" required>
        </div>

        <!-- aper√ßu -->
        <div id="preview-container" style="text-align:center;">
          <h3>Aper√ßu :</h3>
          <img id="preview-img" src="" alt="Aper√ßu" 
               style="max-width:100%; border-radius:10px; display:none;">
        </div>

        <!-- bouton centr√© -->
        <div class="form-input" style="justify-content:center; display:flex;">
          <button type="submit" id="submit-car">üöÄ Lancer l'inf√©rence</button>
        </div>
      </form>
    </div>
  </div>
</div>


document.getElementById("image-upload").addEventListener("change", function(event) {
  const file = event.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      const preview = document.getElementById("preview-img");
      preview.src = e.target.result;
      preview.style.display = "block"; // rendre visible
    };
    reader.readAsDataURL(file);
  }
});


from flask import Flask, request, render_template, redirect, url_for
import os

app = Flask(__name__)

# dossier d'upload
UPLOAD_FOLDER = 'static/upload'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload():
    if 'image' not in request.files:
        return "Aucune image s√©lectionn√©e", 400
    
    file = request.files['image']
    if file.filename == '':
        return "Nom de fichier vide", 400
    
    # Sauvegarde sous le nom unique "uploadedimage.jpg"
    save_path = os.path.join(UPLOAD_FOLDER, "uploadedimage.jpg")
    file.save(save_path)

    return redirect(url_for('index'))
