import pandas as pd
from collections import defaultdict

# -------------------------- #
# 1. Charger et traiter Excel
# -------------------------- #
excel_path = "composants.xlsx"
df_excel = pd.read_excel(excel_path)

# Ajouter suffixes _1, _2, etc.
comptage = defaultdict(int)
noms_modifies = []

for comp in df_excel['Composant']:
    comptage[comp] += 1
    comp_modifie = f"{comp}_{comptage[comp]}"
    noms_modifies.append(comp_modifie)

df_excel['Composant'] = noms_modifies

# S√©parer les composants connus / inconnus
df_connus = df_excel.dropna(subset=['Temps de r√©tention'])
df_inconnus = df_excel[df_excel['Temps de r√©tention'].isna()]

composants_connus = dict(zip(df_connus['Composant'], df_connus['Temps de r√©tention']))
composants_inconnus = list(df_inconnus['Composant'])

# -------------------------- #
# 2. Charger le fichier JSON
# -------------------------- #
import json

json_path = "chromatogrammes.json"
df_json = pd.read_json(json_path)
df_json = df_json.dropna(subset=['pics'])

# -------------------------- #
# 3. Fonction d'extraction des composants
# -------------------------- #
def extraire_composants_avec_temps(pics_dict):
    seen_counts = defaultdict(int)
    composants_detectes = {}

    sorted_pics = sorted(pics_dict.items(), key=lambda x: float(x[0]))

    for pic_time_str, data in sorted_pics:
        pic_time = float(pic_time_str)
        if pic_time <= 150:
            base_name = data[0]
            seen_counts[base_name] += 1
            comp_name = f"{base_name}_{seen_counts[base_name]}"
            composants_detectes[comp_name] = pic_time
    return composants_detectes

# -------------------------- #
# 4. Analyse des chromatogrammes
# -------------------------- #
chromatogrammes_complets = []

for idx, row in df_json.iterrows():
    composants_detectes = extraire_composants_avec_temps(row['pics'])

    # V√©rifier si tous les composants inconnus sont d√©tect√©s
    if all(comp in composants_detectes for comp in composants_inconnus):
        # V√©rifier si les temps des composants connus correspondent
        correspondance = all(
            comp in composants_detectes and abs(composants_detectes[comp] - composants_connus[comp]) < 0.5
            for comp in composants_connus
        )

        chromatogrammes_complets.append({
            'index': idx,
            'composants_inconnus_avec_temps': {comp: composants_detectes[comp] for comp in composants_inconnus},
            'correspondance_connus': correspondance
        })

# -------------------------- #
# 5. Affichage des r√©sultats
# -------------------------- #
print("\n--- R√©sultats ---\n")
if chromatogrammes_complets:
    for entry in chromatogrammes_complets:
        print(f"‚úÖ Chromatogramme #{entry['index']}")
        print("  Temps de r√©tention pour composants inconnus :")
        for comp, time in entry['composants_inconnus_avec_temps'].items():
            print(f"    - {comp} : {time:.2f} min")
        print(f"  Composants connus valides : {'‚úÖ Oui' if entry['correspondance_connus'] else '‚ùå Non'}")
        print()
else:
    print("Aucun chromatogramme ne contient tous les composants inconnus.")

df_excel.to_excel("composants_modifies.xlsx", index=False)



import pandas as pd
from collections import defaultdict
import json

# -------------------------- #
# 1. Charger et renommer les composants Excel
# -------------------------- #
excel_path = "composants.xlsx"
df_excel = pd.read_excel(excel_path)

# Ajouter suffixes _1, _2, etc.
comptage = defaultdict(int)
noms_modifies = []

for comp in df_excel['Composant']:
    comptage[comp] += 1
    comp_modifie = f"{comp}_{comptage[comp]}"
    noms_modifies.append(comp_modifie)

df_excel['Composant'] = noms_modifies

# S√©parer composants connus / inconnus
df_connus = df_excel.dropna(subset=['Temps de r√©tention'])
df_inconnus = df_excel[df_excel['Temps de r√©tention'].isna()]

composants_connus = dict(zip(df_connus['Composant'], df_connus['Temps de r√©tention']))
composants_inconnus = list(df_inconnus['Composant'])

# -------------------------- #
# 2. Charger les chromatogrammes JSON
# -------------------------- #
json_path = "chromatogrammes.json"
df_json = pd.read_json(json_path)
df_json = df_json.dropna(subset=['pics'])

# -------------------------- #
# 3. Fonction d'extraction des composants avec indices
# -------------------------- #
def extraire_composants_avec_temps(pics_dict):
    seen_counts = defaultdict(int)
    composants_detectes = {}

    sorted_pics = sorted(pics_dict.items(), key=lambda x: float(x[0]))

    for pic_time_str, data in sorted_pics:
        pic_time = float(pic_time_str)
        if pic_time <= 150:
            base_name = data[0]
            seen_counts[base_name] += 1
            comp_name = f"{base_name}_{seen_counts[base_name]}"
            composants_detectes[comp_name] = pic_time
    return composants_detectes

# -------------------------- #
# 4. Analyse des chromatogrammes
# -------------------------- #
resultats = []

for idx, row in df_json.iterrows():
    composants_detectes = extraire_composants_avec_temps(row['pics'])

    # V√©rifier si tous les composants inconnus sont pr√©sents
    if all(comp in composants_detectes for comp in composants_inconnus):
        comparaison_connus = {}
        for comp, ref_time in composants_connus.items():
            if comp in composants_detectes:
                obs_time = composants_detectes[comp]
                match = abs(obs_time - ref_time) < 0.5
                comparaison_connus[comp] = {
                    'observ√©': obs_time,
                    'r√©f√©rence': ref_time,
                    'match': match
                }

        resultats.append({
            'index': idx,
            'composants_inconnus': {c: composants_detectes[c] for c in composants_inconnus},
            'comparaison_connus': comparaison_connus
        })

# -------------------------- #
# 5. Affichage final
# -------------------------- #
print("\n--- R√©sultats ---\n")
if not resultats:
    print("Aucun chromatogramme ne contient tous les composants inconnus.")
else:
    for r in resultats:
        print(f"‚úÖ Chromatogramme #{r['index']}")
        print("  üìå Temps de r√©tention des composants inconnus :")
        for comp, tr in r['composants_inconnus'].items():
            print(f"    - {comp} : {tr:.2f} min")

        print("  üîç Comparaison des composants connus (si pr√©sents) :")
        if not r['comparaison_connus']:
            print("    Aucun composant connu pr√©sent.")
        else:
            for comp, info in r['comparaison_connus'].items():
                print(f"    - {comp} : Observ√© = {info['observ√©']:.2f} / R√©f√©rence = {info['r√©f√©rence']:.2f} ‚Üí {'‚úÖ OK' if info['match'] else '‚ùå Diff√©rent'}")
        print()
