import os
import json
import glob
import numpy as np
import cv2
from tqdm import tqdm

def labelme_to_coco_segmentation(labelme_dir, output_file):
    categories = []
    label_set = set()
    annotation_id = 1
    image_id = 1

    coco_output = {
        "images": [],
        "annotations": [],
        "categories": []
    }

    # Collect all label names
    for json_file in glob.glob(os.path.join(labelme_dir, "*.json")):
        with open(json_file) as f:
            data = json.load(f)
            for shape in data["shapes"]:
                label_set.add(shape["label"])

    label_list = sorted(list(label_set))
    label_to_id = {label: idx + 1 for idx, label in enumerate(label_list)}

    for label, idx in label_to_id.items():
        coco_output["categories"].append({
            "id": idx,
            "name": label,
            "supercategory": "object"
        })

    for json_path in tqdm(glob.glob(os.path.join(labelme_dir, "*.json"))):
        with open(json_path) as f:
            data = json.load(f)

        image_path = os.path.join(labelme_dir, data["imagePath"])
        if not os.path.exists(image_path):
            print(f"Image not found: {image_path}")
            continue

        img = cv2.imread(image_path)
        height, width = img.shape[:2]

        coco_output["images"].append({
            "id": image_id,
            "file_name": data["imagePath"],
            "height": height,
            "width": width
        })

        for shape in data["shapes"]:
            points = np.array(shape["points"], dtype=np.float32).flatten().tolist()

            # Create a binary mask from the polygon
            mask = np.zeros((height, width), dtype=np.uint8)
            polygon = np.array([shape["points"]], dtype=np.int32)
            cv2.fillPoly(mask, polygon, 1)
            area = float(np.sum(mask))

            # Calculate bounding box
            x, y, w, h = cv2.boundingRect(polygon)

            annotation = {
                "id": annotation_id,
                "image_id": image_id,
                "category_id": label_to_id[shape["label"]],
                "segmentation": [points],
                "area": area,
                "bbox": [x, y, w, h],
                "iscrowd": 0
            }

            coco_output["annotations"].append(annotation)
            annotation_id += 1

        image_id += 1

    # Save output
    with open(output_file, "w") as f:
        json.dump(coco_output, f, indent=4)
    print(f"\n‚úÖ Fichier COCO segmentation sauvegard√© ici : {output_file}")

# üîß Ex√©cution
labelme_dir = "dataset"  # Remplace par le chemin vers ton dossier
output_file = "coco_segmentation.json"

labelme_to_coco_segmentation(labelme_dir, output_file)


import os
import json
import glob
import numpy as np
import cv2
from tqdm import tqdm

def labelme_to_coco_segmentation(labelme_dir, output_file):
    annotation_id = 1
    image_id = 1

    coco_output = {
        "images": [],
        "annotations": [],
        "categories": []
    }

    # Collect all label names
    label_set = set()
    for json_file in glob.glob(os.path.join(labelme_dir, "*.json")):
        with open(json_file) as f:
            data = json.load(f)
            for shape in data.get("shapes", []):
                label_set.add(shape["label"])

    label_list = sorted(list(label_set))
    label_to_id = {label: idx + 1 for idx, label in enumerate(label_list)}

    for label, idx in label_to_id.items():
        coco_output["categories"].append({
            "id": idx,
            "name": label,
            "supercategory": "object"
        })

    for json_path in tqdm(glob.glob(os.path.join(labelme_dir, "*.json"))):
        with open(json_path) as f:
            data = json.load(f)

        image_filename = data["imagePath"]
        image_path = os.path.join(labelme_dir, image_filename)
        if not os.path.exists(image_path):
            print(f"‚ö†Ô∏è Image not found: {image_path}")
            continue

        img = cv2.imread(image_path)
        height, width = img.shape[:2]

        coco_output["images"].append({
            "id": image_id,
            "file_name": image_filename,
            "height": height,
            "width": width
        })

        shapes = data.get("shapes", [])
        if shapes:
            for shape in shapes:
                points = np.array(shape["points"], dtype=np.float32).flatten().tolist()

                # Create binary mask
                mask = np.zeros((height, width), dtype=np.uint8)
                polygon = np.array([shape["points"]], dtype=np.int32)
                cv2.fillPoly(mask, polygon, 1)
                area = float(np.sum(mask))

                # Bounding box
                x, y, w, h = cv2.boundingRect(polygon)

                annotation = {
                    "id": annotation_id,
                    "image_id": image_id,
                    "category_id": label_to_id[shape["label"]],
                    "segmentation": [points],
                    "area": area,
                    "bbox": [x, y, w, h],
                    "iscrowd": 0
                }

                coco_output["annotations"].append(annotation)
                annotation_id += 1

        image_id += 1

    # Save output
    with open(output_file, "w") as f:
        json.dump(coco_output, f, indent=4)
    print(f"\n‚úÖ Fichier COCO sauvegard√© (images avec et sans objets) ici : {output_file}")

# üîß Utilisation
labelme_dir = "dataset"  # Remplace par ton dossier d'entr√©e
output_file = "coco_segmentation.json"

labelme_to_coco_segmentation(labelme_dir, output_file)
