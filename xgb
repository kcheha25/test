def extract_orb_features(image, max_features=500):
    """Extraire les caractéristiques ORB d'une image en niveaux de gris."""
    orb = cv2.ORB_create(nfeatures=max_features)
    keypoints, descriptors = orb.detectAndCompute(image, None)
    
    if descriptors is None:
        descriptors = np.zeros((max_features, 32), dtype=np.uint8)  # Si aucun descripteur n'est trouvé
    
    # Normaliser la taille des descripteurs en les tronquant ou en les remplissant avec des zéros
    if descriptors.shape[0] < max_features:
        padding = np.zeros((max_features - descriptors.shape[0], 32), dtype=np.uint8)
        descriptors = np.vstack((descriptors, padding))  # Remplissage avec des zéros
    
    return descriptors.flatten()  # Transformer en vecteur 1D

# Fonction pour extraire les caractéristiques GLCM
def extract_glcm_features(image):
    """Extraire les caractéristiques GLCM d'une image."""
    
    if image.dtype != np.uint8:
        image = (image * 255).astype(np.uint8)  # Convertir float → uint8
    
    glcm = graycomatrix(image, distances=[1], angles=[0], levels=256, symmetric=True, normed=True)
    
    contrast = graycoprops(glcm, 'contrast')[0, 0]
    homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]
    energy = graycoprops(glcm, 'energy')[0, 0]
    correlation = graycoprops(glcm, 'correlation')[0, 0]
    
    return np.array([contrast, homogeneity, energy, correlation])

# Appliquer Data Augmentation
def augment_image(image):
    """Effectuer des transformations pour augmenter les données."""
    datagen = ImageDataGenerator(rotation_range=20, horizontal_flip=True, zoom_range=0.2)
    image = np.expand_dims(image, axis=0)  # Ajouter une dimension pour le générateur
    augmented_images = [image]
    
    for batch in datagen.flow(image, batch_size=1):
        augmented_images.append(batch[0])
        if len(augmented_images) >= 3:
            break

    return [img.squeeze() for img in augmented_images]

# Fonction pour créer le dataset
def create_dataset(image_dir, annotation_dir):
    features = []
    labels = []
    
    image_paths = [os.path.join(image_dir, f) for f in os.listdir(image_dir) if f.endswith('.jpg') or f.endswith('.png')]
    
    for image_path in image_paths:
        txt_file = os.path.join(annotation_dir, os.path.basename(image_path).replace('.jpg', '.txt').replace('.png', '.txt'))
        
        if os.path.exists(txt_file):
            img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
            augmented_images = augment_image(img)
            
            for aug_img in augmented_images:
                # Extraire les caractéristiques
                hog_features = extract_hog_features(aug_img)
                orb_features = extract_orb_features(aug_img)
                glcm_features = extract_glcm_features(aug_img)
                
                # Concaténer toutes les caractéristiques
                feature_vector = np.hstack((hog_features, orb_features, glcm_features))
                features.append(feature_vector)
                
                # Ajouter le label (nombre d'objets)
                num_objects = count_objects_in_dota_annotation(txt_file)
                labels.append(num_objects)

    return np.array(features, dtype=np.float32), np.array(labels, dtype=np.float32)