import numpy as np
import matplotlib.pyplot as plt

# üîπ Fonction pour calculer la diagonale d'une bbox (conversion en nm)
def compute_bbox_diagonal(bbox, resolution=0.0657):
    x, y, w, h, score = bbox  # Extraction des valeurs
    diagonal_pixels = np.sqrt(w**2 + h**2)  # Calcul de la diagonale en pixels
    diagonal_nm = diagonal_pixels * resolution  # Conversion en nm
    return diagonal_nm

# üîπ Fonction pour g√©n√©rer l'histogramme
def plot_avg_sheet_length_by_count(feuille_counts, bboxes):
    """
    Affiche un histogramme de la longueur moyenne des feuillets en fonction du nombre de feuillets d√©tect√©s.
    
    - X : Nombre de feuillets d√©tect√©s par ROI
    - Y : Longueur moyenne des feuillets pour ce groupe
    """
    # üîπ Cr√©ation d'un dictionnaire pour stocker les longueurs par nombre de feuillets d√©tect√©s
    length_groups = {}

    for i, count in enumerate(feuille_counts):
        length_nm = compute_bbox_diagonal(bboxes[i])  # Calcul de la longueur en nm
        
        if count in length_groups:
            length_groups[count].append(length_nm)
        else:
            length_groups[count] = [length_nm]

    # üîπ Calcul des moyennes pour chaque groupe
    avg_lengths = {count: np.mean(lengths) for count, lengths in length_groups.items()}

    # üîπ Affichage de l'histogramme
    plt.figure(figsize=(10, 6))
    
    plt.bar(avg_lengths.keys(), avg_lengths.values(), color='green', edgecolor='black', alpha=0.7)

    plt.xlabel("Nombre de feuillets d√©tect√©s par ROI")
    plt.ylabel("Longueur moyenne des feuillets (nm)")
    plt.title("Longueur moyenne des feuillets en fonction du nombre de feuillets d√©tect√©s")
    
    plt.xticks(sorted(avg_lengths.keys()))  # Tri des indices
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    
    plt.show()
