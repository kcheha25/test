def create_combined_model(input_shape_cnn, input_shape_manual):
    # Feature extractor CNN (DenseNet)
    base_model = DenseNet121(weights='imagenet', include_top=False, input_shape=input_shape_cnn)
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(512, activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.3)(x)
    cnn_output = Dense(256, activation='relu')(x)
    
    # Feature extractor manuel (MLP)
    input_manual = Input(shape=(input_shape_manual,))
    y = Dense(256, activation='relu')(input_manual)
    y = BatchNormalization()(y)
    y = Dropout(0.3)(y)
    manual_output = Dense(128, activation='relu')(y)
    
    # Fusion des deux
    merged = Concatenate()([cnn_output, manual_output])
    z = Dense(128, activation='relu')(merged)
    z = BatchNormalization()(z)
    z = Dropout(0.3)(z)
    final_output = Dense(1, activation='linear')(z)
    
    # Mod√®le final
    model = Model(inputs=[base_model.input, input_manual], outputs=final_output)
    
    # Fine-tuning du CNN
    for layer in base_model.layers[-20:]:  
        layer.trainable = True  
    
    optimizer = Adam(learning_rate=1e-4)
    model.compile(optimizer=optimizer, loss=['mse', 'mae'], metrics=['mae', 'mse'])
    
    return model