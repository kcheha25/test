import os
import cv2
import json
import numpy as np

def generate_density_map(image, points, sigma=15):
    """G√©n√®re une carte de densit√© en remplissant les objets."""
    h, w = image.shape[:2]
    density_map = np.zeros((h, w), dtype=np.float32)

    for obj in points:
        # On suppose que chaque objet est un polygone
        if len(obj) >= 3:  # Un polygone doit avoir au moins 3 points
            polygon = np.array(obj, np.int32).reshape((-1, 1, 2))
            cv2.fillPoly(density_map, [polygon], 1)  # Remplir l'objet entier

    # Appliquer un flou gaussien avec un noyau de taille impaire
    ksize = int(2 * np.ceil(sigma) + 1)  # Assurer que ksize est impair
    density_map = cv2.GaussianBlur(density_map, (ksize, ksize), sigma)
    
    # Normalisation
    density_map /= density_map.sum() if density_map.sum() > 0 else 1
    return density_map

def load_data_from_labelme(image_dir, annotation_dir, target_size=(256, 256)):
    images = []
    density_maps = []

    # Lire toutes les images dans le r√©pertoire d'images
    image_files = [f for f in os.listdir(image_dir) if f.endswith('.jpg') or f.endswith('.png')]
    
    for img_name in image_files:
        # Charger l'image
        img_path = os.path.join(image_dir, img_name)
        image = cv2.imread(img_path, cv2.IMREAD_COLOR)
        image = cv2.resize(image, target_size)
        image = image.astype(np.float32) / 255.0  # Normalisation
        images.append(image)

        # Associer l'image avec son fichier d'annotation JSON
        ann_name = img_name.replace('.jpg', '.json').replace('.png', '.json')
        ann_path = os.path.join(annotation_dir, ann_name)

        # Lire l'annotation correspondante
        if os.path.exists(ann_path):
            with open(ann_path, 'r') as f:
                annotation = json.load(f)

            # Extraire les polygones des annotations LabelMe
            polygons = []
            for shape in annotation['shapes']:
                points = shape['points']  # Liste des points pour chaque objet
                polygons.append(points)

            # G√©n√©rer la carte de densit√©
            density_map = generate_density_map(image, polygons, sigma=10)
            density_map = cv2.resize(density_map, target_size)
            density_maps.append(density_map)
        else:
            print(f"üî¥ Annotation non trouv√©e pour l'image : {img_name}")

    # Convertir en tableaux NumPy
    images = np.array(images)
    density_maps = np.array(density_maps).reshape(-1, target_size[0], target_size[1], 1)  # Ajouter le canal pour la densit√©

    return images, density_maps
