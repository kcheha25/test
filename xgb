def count_sheets_in_bbox(image, bbox):
    roi = rotate_and_crop(image, bbox)
    feature_vector = extract_all_features(roi)
    feature_vector = feature_vector.reshape(1, -1)

    prediction = xgboost_model.predict(feature_vector)
    return round(prediction[0]), roi

# üîπ D√©tection et histogramme des feuillets d√©tect√©s
def detect_and_plot_sheets(image, bboxes):
    feuille_counts = []

    fig, axes = plt.subplots(1, 3, figsize=(15, 5))

    for i, bbox in enumerate(bboxes):
        count, roi = count_sheets_in_bbox(image, bbox)
        feuille_counts.append(count)
        
        # Affichage de l'extraction d'une ROI pour v√©rification
        if i < 3:
            axes[i].imshow(cv2.cvtColor(roi, cv2.COLOR_BGR2RGB))
            axes[i].set_title(f"ROI {i+1}: {count} feuillets")

    # üîπ Cr√©ation de l'histogramme
    plt.figure(figsize=(8, 6))
    plt.hist(feuille_counts, bins=np.arange(min(feuille_counts), max(feuille_counts) + 1), alpha=0.7, color='blue', edgecolor='black')
    plt.xlabel("Nombre de feuillets d√©tect√©s par ROI")
    plt.ylabel("Fr√©quence")
    plt.title("Histogramme du nombre de feuillets d√©tect√©s par ROI")
    plt.show()