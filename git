Voici une liste complète des **commandes Git essentielles** pour manipuler un projet GitLab, ainsi que des commandes spécifiques pour **GitLab CI/CD** et **GitLab en ligne de commande avec `glab`**, l’outil officiel GitLab CLI.

---

## 🔧 1. **Commandes Git de base (compatibles avec GitLab)**

### 🔁 **Cloner un dépôt**

```bash
git clone https://gitlab.com/nom-utilisateur/nom-projet.git
```

### 📦 **Initialiser un dépôt Git local**

```bash
git init
```

### 🔍 **Vérifier l’état des fichiers**

```bash
git status
```

### 📝 **Ajouter des fichiers à l’index**

```bash
git add .
# ou un fichier spécifique
git add fichier.txt
```

### ✅ **Valider (commit) les modifications**

```bash
git commit -m "Message de commit"
```

### 🔄 **Envoyer les changements sur GitLab**

```bash
git push origin main
# ou autre branche : git push origin develop
```

### 📥 **Récupérer les dernières modifications**

```bash
git pull origin main
```

### 🌿 **Créer une nouvelle branche**

```bash
git checkout -b nouvelle-branche
```

### 🔀 **Fusionner une branche**

```bash
git checkout main
git merge nouvelle-branche
```

---

## ⚙️ 2. **Commandes GitLab CI/CD (dans `.gitlab-ci.yml`)**

Le fichier `.gitlab-ci.yml` permet de décrire les pipelines d’intégration et déploiement continu.

### Exemple de base :

```yaml
stages:
  - build
  - test
  - deploy

build-job:
  stage: build
  script:
    - echo "Compiling code..."

test-job:
  stage: test
  script:
    - echo "Running tests..."

deploy-job:
  stage: deploy
  script:
    - echo "Deploying to production..."
```

### Commandes courantes dans `script` :

```yaml
script:
  - npm install
  - npm run build
  - python3 manage.py test
```

---

## 💻 3. **Commandes GitLab CLI (`glab`)**

> ⚠️ Nécessite l’installation de `glab` :
> 👉 [https://gitlab.com/gitlab-org/cli](https://gitlab.com/gitlab-org/cli)

### 🔐 Connexion

```bash
glab auth login
```

### 📁 Cloner un dépôt

```bash
glab repo clone utilisateur/nom-depot
```

### ➕ Créer un dépôt

```bash
glab repo create nom-depot
```

### ✅ Créer une *merge request*

```bash
glab mr create
```

### 🔍 Lister les merge requests

```bash
glab mr list
```

### 👀 Voir les pipelines

```bash
glab pipeline list
```

### ▶️ Relancer un pipeline

```bash
glab pipeline run
```

---

## 🛠️ 4. **Actions GitLab spécifiques via Web**

Certaines actions se font depuis l’interface GitLab :

* Gérer les **tokens d’accès personnel**
* Gérer les **runners GitLab**
* Configurer les **variables CI/CD**
* Protéger des branches

---

## ❓ Tu veux quoi exactement ?

Si tu veux :

* Une **cheatsheet téléchargeable** ?
* Un **exemple complet de pipeline CI/CD** pour un projet Node, Python, Laravel, etc. ?
* De l’aide pour configurer un **GitLab Runner auto-hébergé** ?

Je peux te le faire rapidement. Fais-moi signe !
