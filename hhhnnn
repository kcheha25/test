import cv2
import numpy as np
import matplotlib.pyplot as plt
from mmrotate.apis import inference_detector, init_detector

def apply_fourier_transform(image):
    """
    Applique la transformÃ©e de Fourier sur une image et retourne le spectre de frÃ©quence.
    :param image: Image d'entrÃ©e (numpy array)
    :return: Spectre de frÃ©quence
    """
    # Convertir l'image en niveau de gris si nÃ©cessaire
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Appliquer la transformÃ©e de Fourier sur l'image
    f = np.fft.fft2(gray_image)
    fshift = np.fft.fftshift(f)  # DÃ©caler les frÃ©quences basses au centre

    # Calculer la magnitude du spectre
    magnitude_spectrum = np.abs(fshift)

    return magnitude_spectrum, fshift

def plot_bboxes_with_fourier(image, result):
    """
    Affiche l'image avec les boÃ®tes englobantes dÃ©tectÃ©es et Ã  cÃ´tÃ©, la transformÃ©e de Fourier pour chaque ROI.
    :param image: Image originale (numpy array)
    :param result: RÃ©sultats des dÃ©tections (liste de bboxes [x, y, w, h, angle, score])
    """
    # Copier l'image originale pour dessiner les boÃ®tes englobantes
    image_copy = image.copy()

    for i, bbox in enumerate(result[0]):  # result[0] est un tableau de bboxes
        x, y, w, h, angle, score = bbox

        # DÃ©couper la rÃ©gion d'intÃ©rÃªt (ROI) de l'image
        roi = image[int(y):int(y+h), int(x):int(x+w)]

        # Appliquer la transformÃ©e de Fourier sur la ROI
        magnitude_spectrum, _ = apply_fourier_transform(roi)

        # Afficher l'image originale avec la boÃ®te englobante
        cv2.rectangle(image_copy, (int(x), int(y)), (int(x + w), int(y + h)), (0, 255, 0), 2)

        # Tracer l'image avec la transformÃ©e de Fourier
        plt.figure(figsize=(12, 6))

        # Image originale avec bbox
        plt.subplot(1, 2, 1)
        plt.imshow(cv2.cvtColor(image_copy, cv2.COLOR_BGR2RGB))
        plt.title(f"Image with bbox {i}")
        plt.axis('off')

        # TransformÃ©e de Fourier pour la ROI
        plt.subplot(1, 2, 2)
        plt.imshow(np.log(1 + magnitude_spectrum), cmap='gray')
        plt.title(f"Fourier Transform for bbox {i}")
        plt.axis('off')

        plt.show()

# Charger le modÃ¨le et les poids
config_file = 'configs/s2anet/s2anet_r50_fpn_1x_dota.py'
checkpoint_file = 'checkpoints/s2anet_r50.pth'
model = init_detector(config_file, checkpoint_file, device='cuda:0')

# Charger l'image Ã  traiter
image_path = 'path_to_your_image.jpg'
image = cv2.imread(image_path)

# Faire les prÃ©dictions avec le modÃ¨le
result = inference_detector(model, image)

# Afficher les boÃ®tes englobantes avec la transformÃ©e de Fourier pour chaque ROI
plot_bboxes_with_fourier(image, result)

import cv2
import numpy as np
import matplotlib.pyplot as plt

def rotate_and_crop(image, bbox):
    """
    Effectue une rotation et extrait la rÃ©gion d'intÃ©rÃªt (ROI) en tenant compte de l'angle.
    """
    x, y, w, h, angle_rad, _ = bbox
    x, y, w, h = map(int, [x, y, w, h])
    
    # ğŸ”¹ Convertir l'angle de radians en degrÃ©s
    angle_deg = np.degrees(angle_rad)

    # ğŸ”¹ DÃ©finir la matrice de rotation
    center = (x, y)
    M = cv2.getRotationMatrix2D(center, -angle_deg, 1.0)

    # ğŸ”¹ Faire pivoter l'image entiÃ¨re
    rotated_img = cv2.warpAffine(image, M, (image.shape[1], image.shape[0]),
                                 flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REFLECT)

    # ğŸ”¹ Extraire la rÃ©gion rectangulaire aprÃ¨s rotation
    x1, y1 = int(x - w / 2), int(y - h / 2)
    x2, y2 = int(x + w / 2), int(y + h / 2)

    roi = rotated_img[max(y1, 0):min(y2, image.shape[0]), max(x1, 0):min(x2, image.shape[1])]
    
    return roi

def count_sheets_in_bbox(image, bbox):
    """
    Compte les feuillets dans une bbox dÃ©tectÃ©e par MMRotate.
    """
    x, y, w, h, angle_rad, score = bbox
    roi = rotate_and_crop(image, bbox)

    # ğŸ”¹ Convertir en niveaux de gris
    gray_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)

    # ğŸ”¹ Appliquer un flou gaussien pour rÃ©duire le bruit
    blurred = cv2.GaussianBlur(gray_roi, (5, 5), 0)

    # ğŸ”¹ Effectuer la projection des intensitÃ©s dans la direction du feuillet
    # CrÃ©er une matrice de rotation pour aligner l'image selon l'angle des feuillets
    rotation_matrix = cv2.getRotationMatrix2D((w / 2, h / 2), np.degrees(angle_rad), 1)
    
    # Appliquer la rotation sur l'image (en la projetant selon l'angle du feuillet)
    rotated = cv2.warpAffine(blurred, rotation_matrix, (w, h), flags=cv2.INTER_LINEAR)

    # ğŸ”¹ Projection sur l'axe vertical de la rÃ©gion (c'est l'axe directionnel des feuillets)
    intensity_profile = np.sum(rotated, axis=0)  # Projection sur les colonnes

    # ğŸ”¹ Seuil dynamique basÃ© sur l'intensitÃ© des projections
    threshold = np.mean(intensity_profile) + np.std(intensity_profile)
    binary_profile = intensity_profile > threshold

    # ğŸ”¹ Trouver les rÃ©gions connectÃ©es dans le profil binaire
    contours, _ = cv2.findContours(binary_profile.astype(np.uint8), 
                                    cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # ğŸ”¹ Filtrer les contours trop petits (bruit)
    min_contour_area = 500  # Ajuster selon la taille attendue des feuillets
    filtered_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > min_contour_area]

    # ğŸ”¹ Affichage des rÃ©sultats
    plt.figure(figsize=(12, 4))

    plt.subplot(1, 2, 1)
    plt.imshow(gray_roi, cmap='gray')
    plt.title(f"ROI alignÃ©e - {len(filtered_contours)} feuillets dÃ©tectÃ©s")

    plt.subplot(1, 2, 2)
    for contour in filtered_contours:
        cv2.drawContours(roi, [contour], -1, (0, 255, 0), 2)
    plt.imshow(roi)
    plt.title("Contours dÃ©tectÃ©s")

    plt.show()

    return len(filtered_contours)

# ğŸ”¹ Chargement de l'image et exÃ©cution de MMRotate
image_path = "path_to_your_image.jpg"
image = cv2.imread(image_path)

# RÃ©sultats de l'infÃ©rence MMRotate
result = inference_detector(model, image)

# ğŸ”¹ Boucle sur chaque bbox dÃ©tectÃ©e
for bbox in result[0]:  
    num_sheets = count_sheets_in_bbox(image, bbox)
    print(f"Nombre estimÃ© de feuillets dans la bbox {bbox[:4]} : {num_sheets}")



