import cv2
import numpy as np
import matplotlib.pyplot as plt
from mmrotate.apis import inference_detector, init_detector

def apply_fourier_transform(image):
    """
    Applique la transformée de Fourier sur une image et retourne le spectre de fréquence.
    :param image: Image d'entrée (numpy array)
    :return: Spectre de fréquence
    """
    # Convertir l'image en niveau de gris si nécessaire
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Appliquer la transformée de Fourier sur l'image
    f = np.fft.fft2(gray_image)
    fshift = np.fft.fftshift(f)  # Décaler les fréquences basses au centre

    # Calculer la magnitude du spectre
    magnitude_spectrum = np.abs(fshift)

    return magnitude_spectrum, fshift

def plot_bboxes_with_fourier(image, result):
    """
    Affiche l'image avec les boîtes englobantes détectées et à côté, la transformée de Fourier pour chaque ROI.
    :param image: Image originale (numpy array)
    :param result: Résultats des détections (liste de bboxes [x, y, w, h, angle, score])
    """
    # Copier l'image originale pour dessiner les boîtes englobantes
    image_copy = image.copy()

    for i, bbox in enumerate(result[0]):  # result[0] est un tableau de bboxes
        x, y, w, h, angle, score = bbox

        # Découper la région d'intérêt (ROI) de l'image
        roi = image[int(y):int(y+h), int(x):int(x+w)]

        # Appliquer la transformée de Fourier sur la ROI
        magnitude_spectrum, _ = apply_fourier_transform(roi)

        # Afficher l'image originale avec la boîte englobante
        cv2.rectangle(image_copy, (int(x), int(y)), (int(x + w), int(y + h)), (0, 255, 0), 2)

        # Tracer l'image avec la transformée de Fourier
        plt.figure(figsize=(12, 6))

        # Image originale avec bbox
        plt.subplot(1, 2, 1)
        plt.imshow(cv2.cvtColor(image_copy, cv2.COLOR_BGR2RGB))
        plt.title(f"Image with bbox {i}")
        plt.axis('off')

        # Transformée de Fourier pour la ROI
        plt.subplot(1, 2, 2)
        plt.imshow(np.log(1 + magnitude_spectrum), cmap='gray')
        plt.title(f"Fourier Transform for bbox {i}")
        plt.axis('off')

        plt.show()

# Charger le modèle et les poids
config_file = 'configs/s2anet/s2anet_r50_fpn_1x_dota.py'
checkpoint_file = 'checkpoints/s2anet_r50.pth'
model = init_detector(config_file, checkpoint_file, device='cuda:0')

# Charger l'image à traiter
image_path = 'path_to_your_image.jpg'
image = cv2.imread(image_path)

# Faire les prédictions avec le modèle
result = inference_detector(model, image)

# Afficher les boîtes englobantes avec la transformée de Fourier pour chaque ROI
plot_bboxes_with_fourier(image, result)
