import cv2
import numpy as np
import matplotlib.pyplot as plt
from mmrotate.apis import inference_detector, init_detector

def apply_fourier_transform(image):
    """
    Applique la transform√©e de Fourier sur une image et retourne le spectre de fr√©quence.
    :param image: Image d'entr√©e (numpy array)
    :return: Spectre de fr√©quence
    """
    # Convertir l'image en niveau de gris si n√©cessaire
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Appliquer la transform√©e de Fourier sur l'image
    f = np.fft.fft2(gray_image)
    fshift = np.fft.fftshift(f)  # D√©caler les fr√©quences basses au centre

    # Calculer la magnitude du spectre
    magnitude_spectrum = np.abs(fshift)

    return magnitude_spectrum, fshift

def plot_bboxes_with_fourier(image, result):
    """
    Affiche l'image avec les bo√Ætes englobantes d√©tect√©es et √† c√¥t√©, la transform√©e de Fourier pour chaque ROI.
    :param image: Image originale (numpy array)
    :param result: R√©sultats des d√©tections (liste de bboxes [x, y, w, h, angle, score])
    """
    # Copier l'image originale pour dessiner les bo√Ætes englobantes
    image_copy = image.copy()

    for i, bbox in enumerate(result[0]):  # result[0] est un tableau de bboxes
        x, y, w, h, angle, score = bbox

        # D√©couper la r√©gion d'int√©r√™t (ROI) de l'image
        roi = image[int(y):int(y+h), int(x):int(x+w)]

        # Appliquer la transform√©e de Fourier sur la ROI
        magnitude_spectrum, _ = apply_fourier_transform(roi)

        # Afficher l'image originale avec la bo√Æte englobante
        cv2.rectangle(image_copy, (int(x), int(y)), (int(x + w), int(y + h)), (0, 255, 0), 2)

        # Tracer l'image avec la transform√©e de Fourier
        plt.figure(figsize=(12, 6))

        # Image originale avec bbox
        plt.subplot(1, 2, 1)
        plt.imshow(cv2.cvtColor(image_copy, cv2.COLOR_BGR2RGB))
        plt.title(f"Image with bbox {i}")
        plt.axis('off')

        # Transform√©e de Fourier pour la ROI
        plt.subplot(1, 2, 2)
        plt.imshow(np.log(1 + magnitude_spectrum), cmap='gray')
        plt.title(f"Fourier Transform for bbox {i}")
        plt.axis('off')

        plt.show()

# Charger le mod√®le et les poids
config_file = 'configs/s2anet/s2anet_r50_fpn_1x_dota.py'
checkpoint_file = 'checkpoints/s2anet_r50.pth'
model = init_detector(config_file, checkpoint_file, device='cuda:0')

# Charger l'image √† traiter
image_path = 'path_to_your_image.jpg'
image = cv2.imread(image_path)

# Faire les pr√©dictions avec le mod√®le
result = inference_detector(model, image)

# Afficher les bo√Ætes englobantes avec la transform√©e de Fourier pour chaque ROI
plot_bboxes_with_fourier(image, result)

import cv2
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

def rotate_and_crop(image, bbox):
    """
    Effectue une rotation et extrait la r√©gion d'int√©r√™t (ROI) en tenant compte de l'angle.
    """
    x, y, w, h, angle_rad, _ = bbox
    x, y, w, h = map(int, [x, y, w, h])
    
    # Convertir l'angle de radians en degr√©s
    angle_deg = np.degrees(angle_rad)

    # D√©finir la matrice de rotation
    center = (x, y)
    M = cv2.getRotationMatrix2D(center, -angle_deg, 1.0)

    # Faire pivoter l'image enti√®re
    rotated_img = cv2.warpAffine(image, M, (image.shape[1], image.shape[0]),
                                 flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REFLECT)

    # Extraire la r√©gion rectangulaire apr√®s rotation
    x1, y1 = int(x - w / 2), int(y - h / 2)
    x2, y2 = int(x + w / 2), int(y + h / 2)

    roi = rotated_img[max(y1, 0):min(y2, image.shape[0]), max(x1, 0):min(x2, image.shape[1])]
    
    return roi

def improve_contrast_and_smooth(image):
    """
    Applique une am√©lioration de contraste, un lissage et une d√©tection de bords Canny.
    """
    # Convertir l'image en niveaux de gris
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # üîπ Am√©lioration du contraste (√©qualisation d'histogramme)
    equalized_image = cv2.equalizeHist(gray_image)

    # üîπ Appliquer un filtre de flou gaussien pour lisser l'image
    blurred_image = cv2.GaussianBlur(equalized_image, (5, 5), 0)

    # üîπ Appliquer un filtre Canny pour d√©tecter les bords
    edges = cv2.Canny(blurred_image, 100, 200)

    return edges, blurred_image

def morphological_processing(edges):
    """
    Applique une analyse morphologique pour combler les trous dans les objets.
    """
    # üîπ Appliquer une dilatation pour combler les trous dans les objets
    kernel = np.ones((5, 5), np.uint8)
    dilated = cv2.dilate(edges, kernel, iterations=1)

    # üîπ Appliquer une √©rosion pour affiner les objets
    eroded = cv2.erode(dilated, kernel, iterations=1)

    return eroded

def integrate_in_orientation(image, bbox):
    """
    Projette les intensit√©s dans la direction de l'angle de la bbox.
    """
    x, y, w, h, angle_rad, _ = bbox  # D√©compositions du bbox
    roi = rotate_and_crop(image, bbox)

    # Appliquer les traitements pour am√©liorer l'image
    edges, blurred_image = improve_contrast_and_smooth(roi)

    # Appliquer une analyse morphologique pour combler les trous
    processed_image = morphological_processing(edges)

    return processed_image, blurred_image

def count_sheets_in_bbox(image, bbox):
    """
    Compte les feuillets dans une bbox d√©tect√©e par MMRotate.
    """
    x, y, w, h, angle_rad, score = bbox  # D√©compositions du bbox

    # Calculer l'int√©gration dans la direction de l'angle
    processed_image, blurred_image = integrate_in_orientation(image, bbox)

    # D√©tection des contours (Canny)
    contours, _ = cv2.findContours(processed_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    num_sheets = len(contours)

    # Affichage des r√©sultats
    plt.figure(figsize=(12, 4))

    # Affichage de l'image filtr√©e avec contours
    plt.subplot(1, 2, 1)
    plt.imshow(processed_image, cmap='gray')
    plt.title(f"Contours apr√®s analyse morphologique")

    # Affichage de l'image flout√©e
    plt.subplot(1, 2, 2)
    plt.imshow(blurred_image, cmap='gray')
    plt.title("Image apr√®s flou et √©galisation d'histogramme")
    plt.show()

    return num_sheets

# Chargement de l'image et ex√©cution de MMRotate
image_path = "path_to_your_image.jpg"
image = cv2.imread(image_path)

# R√©sultats de l'inf√©rence MMRotate
result = inference_detector(model, image)

# Boucle sur chaque bbox d√©tect√©e
for bbox in result[0]:  
    num_sheets = count_sheets_in_bbox(image, bbox)
    print(f"Nombre estim√© de feuillets dans la bbox {bbox[:4]} : {num_sheets}")





