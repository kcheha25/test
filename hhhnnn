import cv2
import numpy as np
import matplotlib.pyplot as plt
import pywt
from scipy.signal import find_peaks
from scipy.fftpack import fft

def rotate_and_crop(image, bbox):
    """
    Effectue une rotation et extrait la région d'intérêt (ROI) en tenant compte de l'angle.
    """
    x, y, w, h, angle_rad, _ = bbox
    x, y, w, h = map(int, [x, y, w, h])
    
    # Convertir l'angle de radians en degrés
    angle_deg = np.degrees(angle_rad)

    # Définir la matrice de rotation
    center = (x, y)
    M = cv2.getRotationMatrix2D(center, -angle_deg, 1.0)

    # Faire pivoter l'image entière
    rotated_img = cv2.warpAffine(image, M, (image.shape[1], image.shape[0]),
                                 flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REFLECT)

    # Extraire la région rectangulaire après rotation
    x1, y1 = int(x - w / 2), int(y - h / 2)
    x2, y2 = int(x + w / 2), int(y + h / 2)

    roi = rotated_img[max(y1, 0):min(y2, image.shape[0]), max(x1, 0):min(x2, image.shape[1])]
    
    return roi

def integrate_in_orientation(image, bbox):
    """
    Projette les intensités dans la direction de l'angle de la bbox.
    """
    x, y, w, h, angle_rad, _ = bbox
    roi = rotate_and_crop(image, bbox)

    # Convertir en niveaux de gris
    gray_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)

    # Calculer le vecteur unitaire dans la direction de l'angle
    angle_deg = np.degrees(angle_rad)
    direction = np.array([np.cos(angle_rad), np.sin(angle_rad)])

    # Créer une grille pour l'intégration
    rows, cols = gray_roi.shape
    projection = np.zeros(rows)

    for i in range(rows):
        for j in range(cols):
            x_proj = int(i + direction[0] * j)
            y_proj = int(j + direction[1] * i)

            if 0 <= x_proj < rows and 0 <= y_proj < cols:
                projection[i] += gray_roi[x_proj, y_proj]
    
    return projection

def count_sheets_in_bbox(image, bbox):
    """
    Applique trois méthodes différentes pour analyser les variations d'intensité projetée :
    1. Détection des pics avec find_peaks
    2. Analyse spectrale FFT
    3. Analyse par ondelettes de Haar
    """
    intensity_profile = integrate_in_orientation(image, bbox)

    # 1. Détection des pics
    peaks, _ = find_peaks(intensity_profile, distance=max(5, int(len(intensity_profile) * 0.1)), 
                          height=np.max(intensity_profile) * 0.3)

    # 2. Spectre FFT
    fft_spectrum = np.abs(fft(intensity_profile))
    fft_freqs = np.fft.fftfreq(len(intensity_profile))

    # 3. Décomposition par ondelettes de Haar
    coeffs = pywt.wavedec(intensity_profile, 'haar', level=3)
    haar_spectrum = coeffs[0]  # Coefficients d'approximation

    # Affichage des résultats
    fig, axes = plt.subplots(1, 4, figsize=(18, 4))

    # (a) Profil d'intensité projeté avec détection des pics
    axes[0].plot(intensity_profile, label="Profil d'intensité")
    axes[0].scatter(peaks, intensity_profile[peaks], color='r', label="Pics détectés")
    axes[0].set_title(f"Find Peaks - {len(peaks)} feuillets détectés")
    axes[0].legend()

    # (b) Spectre FFT
    axes[1].plot(fft_freqs[:len(fft_freqs)//2], fft_spectrum[:len(fft_spectrum)//2])
    axes[1].set_title("Spectre FFT")
    
    # (c) Ondelettes de Haar
    axes[2].plot(haar_spectrum)
    axes[2].set_title("Spectre Haar")

    # (d) ROI extraite
    roi = rotate_and_crop(image, bbox)
    axes[3].imshow(cv2.cvtColor(roi, cv2.COLOR_BGR2RGB))
    axes[3].set_title("ROI alignée")

    plt.show()

    return len(peaks)

# Chargement de l'image et exécution de MMRotate
image_path = "path_to_your_image.jpg"
image = cv2.imread(image_path)

# Résultats de l'inférence MMRotate
result = inference_detector(model, image)

# Boucle sur chaque bbox détectée
for bbox in result[0]:  
    num_sheets = count_sheets_in_bbox(image, bbox)
    print(f"Nombre estimé de feuillets dans la bbox {bbox[:4]} : {num_sheets}")
