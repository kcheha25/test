<label>
  <input type="checkbox" id="multi-mode"> Traiter plusieurs images
</label>

<div id="upload-section">
  <input type="file" id="image-upload" />
  <div id="preview">
    <img id="preview-img" src="" alt="Preview" style="display:none;" />
  </div>
</div>


const multiMode = document.getElementById("multi-mode");
const uploadSection = document.getElementById("upload-section");

multiMode.addEventListener("change", () => {
  uploadSection.innerHTML = ""; // reset

  if (multiMode.checked) {
    // Mode multi-images
    uploadSection.innerHTML = `
      <label>Uploader plusieurs images :</label>
      <input type="file" id="multi-upload" multiple>
    `;
  } else {
    // Mode simple (une image + preview)
    uploadSection.innerHTML = `
      <label>Uploader image :</label>
      <input type="file" id="image-upload">
      <div id="preview">
        <img id="preview-img" src="" alt="Preview" style="display:none;" />
      </div>
    `;

    const uploadInput = document.getElementById("image-upload");
    const previewImg = document.getElementById("preview-img");

    uploadInput.addEventListener("change", function(){
      const file = this.files[0];
      if (!file) return;

      const formData = new FormData();
      formData.append("image", file);

      fetch("/upload_preview", {method:"POST", body:formData})
        .then(res => res.json())
        .then(data => {
          previewImg.src = data.preview + "?ts=" + new Date().getTime();
          previewImg.style.display = "block";
        })
        .catch(err => console.error(err));
    });
  }
});

<label>
  <input type="checkbox" id="multi-mode"> Mode multi-images
</label>

<div id="upload-section">
  <input type="file" id="image-upload">
  <div id="preview">
    <button id="prev-btn" style="display:none">⬅️</button>
    <img id="preview-img" src="" alt="Preview" style="display:none; max-width:300px;" />
    <button id="next-btn" style="display:none">➡️</button>
  </div>
</div>

@app.route("/upload_preview", methods=["POST"])
def upload_preview():
    if "multi" in request.form and request.form["multi"] == "true":
        # === MODE MULTI ===
        if "images[]" not in request.files:
            return jsonify({"error": "Aucune image reçue"}), 400

        files = request.files.getlist("images[]")
        saved_paths = []

        for file in files:
            orig_name, orig_ext = os.path.splitext(file.filename)
            orig_ext = orig_ext.lower()
            save_path = os.path.join("static", f"{orig_name}{orig_ext}")
            file.save(save_path)

            # conversion en PNG
            img = Image.open(save_path)
            png_path = os.path.join("static", f"{orig_name}.png")
            img.save(png_path, "PNG")
            saved_paths.append(f"/{png_path.replace(os.sep, '/')}")

        return jsonify({"previews": saved_paths})

    else:
        # === MODE SIMPLE ===
        if "image" not in request.files:
            return jsonify({"error": "Aucune image reçue"}), 400

        file = request.files["image"]
        orig_name, orig_ext = os.path.splitext(file.filename)
        orig_ext = orig_ext.lower()
        save_path = os.path.join("static", f"uploadedimage{orig_ext}")
        file.save(save_path)

        img = Image.open(save_path)
        png_path = os.path.join("static", "uploadedimage.png")
        img.save(png_path, "PNG")

        return jsonify({"preview": f"/{png_path.replace(os.sep, '/')}"} )

const uploadInput = document.getElementById("image-upload");
const previewImg = document.getElementById("preview-img");
const multiMode = document.getElementById("multi-mode");

let previewImages = [];
let previewIndex = 0;

// Quand fichier(s) choisi(s)
uploadInput.addEventListener("change", function(){
  const formData = new FormData();

  if (multiMode.checked) {
    // === MODE MULTI ===
    for (let f of this.files) formData.append("images[]", f);
    formData.append("multi", "true");
  } else {
    // === MODE SIMPLE ===
    if (!this.files[0]) return;
    formData.append("image", this.files[0]);
    formData.append("multi", "false");
  }

  fetch("/upload_preview", {method:"POST", body:formData})
    .then(res => res.json())
    .then(data => {
      if (multiMode.checked) {
        // Carrousel multi
        previewImages = data.previews;
        previewIndex = 0;
        updatePreview();

        if (previewImages.length > 1) {
          document.getElementById("prev-btn").style.display = "inline-block";
          document.getElementById("next-btn").style.display = "inline-block";
        }
      } else {
        // Simple preview
        previewImg.src = data.preview + "?ts=" + new Date().getTime();
        previewImg.style.display = "block";
        document.getElementById("prev-btn").style.display = "none";
        document.getElementById("next-btn").style.display = "none";
      }
    })
    .catch(err => console.error(err));
});

function updatePreview() {
  if (previewImages.length > 0) {
    previewImg.src = previewImages[previewIndex] + "?ts=" + new Date().getTime();
    previewImg.style.display = "block";
  }
}

document.getElementById("prev-btn").addEventListener("click", () => {
  if (previewImages.length === 0) return;
  previewIndex = (previewIndex - 1 + previewImages.length) % previewImages.length;
  updatePreview();
});

document.getElementById("next-btn").addEventListener("click", () => {
  if (previewImages.length === 0) return;
  previewIndex = (previewIndex + 1) % previewImages.length;
  updatePreview();
});

<label>
  <input type="checkbox" id="multi-mode"> Mode multi-images
</label>

<div id="upload-section"></div>
<div id="preview"></div>
const multiMode = document.getElementById("multi-mode");
const uploadSection = document.getElementById("upload-section");
const preview = document.getElementById("preview");

function renderUploadUI() {
  if (multiMode.checked) {
    // === MODE MULTI ===
    uploadSection.innerHTML = `
      <label>Uploader plusieurs images :</label>
      <input type="file" id="image-upload" multiple>
    `;

    preview.innerHTML = `
      <button id="prev-btn" style="display:none">⬅️</button>
      <img id="preview-img" src="" style="display:none; max-width:300px;" />
      <button id="next-btn" style="display:none">➡️</button>
    `;
  } else {
    // === MODE SIMPLE ===
    uploadSection.innerHTML = `
      <label>Uploader une image :</label>
      <input type="file" id="image-upload">
    `;

    preview.innerHTML = `
      <img id="preview-img" src="" style="display:none; max-width:300px;" />
    `;
  }
}

// Premier rendu
renderUploadUI();

// Réagir au changement de checkbox
multiMode.addEventListener("change", () => {
  renderUploadUI();
});


const uploadSection = document.getElementById("upload-section");
const previewImg = document.getElementById("preview-img");
const multiMode = document.getElementById("multi-mode");

let previewImages = [];
let previewIndex = 0;

uploadSection.addEventListener("change", function(e) {
  if (!e.target || e.target.id !== "image-upload") return;

  const files = e.target.files;
  if (!files || files.length === 0) return;

  const formData = new FormData();

  if (multiMode.checked) {
    // === MODE MULTI ===
    for (let f of files) {
      formData.append("images[]", f);
    }
    formData.append("multi", "true");
  } else {
    // === MODE SIMPLE ===
    formData.append("image", files[0]);
    formData.append("multi", "false");
  }

  fetch("/upload_preview", { method: "POST", body: formData })
    .then(res => res.json())
    .then(data => {
      if (multiMode.checked) {
        // Carrousel multi
        previewImages = data.previews || [];
        previewIndex = 0;
        updatePreview();

        if (previewImages.length > 1) {
          document.getElementById("prev-btn").style.display = "inline-block";
          document.getElementById("next-btn").style.display = "inline-block";
        }
      } else {
        // Simple preview
        previewImg.src = data.preview + "?ts=" + new Date().getTime();
        previewImg.style.display = "block";
        document.getElementById("prev-btn").style.display = "none";
        document.getElementById("next-btn").style.display = "none";
      }
    })
    .catch(err => console.error(err));
});

function updatePreview() {
  if (previewImages.length > 0) {
    previewImg.src = previewImages[previewIndex] + "?ts=" + new Date().getTime();
    previewImg.style.display = "block";
  }
}

document.getElementById("prev-btn").addEventListener("click", () => {
  if (previewImages.length === 0) return;
  previewIndex = (previewIndex - 1 + previewImages.length) % previewImages.length;
  updatePreview();
});

document.getElementById("next-btn").addEventListener("click", () => {
  if (previewImages.length === 0) return;
  previewIndex = (previewIndex + 1) % previewImages.length;
  updatePreview();
});
