import matplotlib.pyplot as plt
import matplotlib.patches as patches

def plot_chromatogram_with_peaks(x_batch, y_batch, sample_idx=0):
    """
    Affiche un chromatogramme avec les pics détectés
    
    Args:
        x_batch: Batch de données chromatographiques (shape: [batch, points, 1])
        y_batch: Batch de labels (shape: [batch, points, 3])
        sample_idx: Index de l'échantillon dans le batch à visualiser
    """
    plt.figure(figsize=(15, 6))
    
    # Extraire les données du sample spécifique
    chromatogram = x_batch[sample_idx, :, 0]  # Signal chromatographique
    y_sample = y_batch[sample_idx]  # Labels
    
    # Créer un array d'indices pour l'axe x (points filtrés)
    x_points = np.arange(len(chromatogram))
    
    # Tracer le chromatogramme
    plt.plot(x_points, chromatogram, label='Signal chromatographique', linewidth=1)
    
    # Identifier les pics (où prob > 0.5)
    peak_indices = np.where(y_sample[:, 0] > 0.5)[0]
    
    if len(peak_indices) > 0:
        # Tracer les pics détectés
        plt.scatter(x_points[peak_indices], chromatogram[peak_indices], 
                   color='red', s=30, label='Pics détectés', zorder=3)
        
        # Ajouter les zones de pics (bornes)
        for idx in peak_indices:
            # Calculer les bornes en points
            pos_norm = y_sample[idx, 1]
            area_norm = y_sample[idx, 2]
            
            # Convertir en positions réelles
            left = int(pos_norm * len(chromatogram) - int(area_norm * len(chromatogram)/2
            right = int(pos_norm * len(chromatogram)) + int(area_norm * len(chromatogram)/2
            
            # Ajuster pour rester dans les bornes
            left = max(0, left)
            right = min(len(chromatogram)-1, right)
            
            # Créer un rectangle pour la zone du pic
            rect = patches.Rectangle(
                (left, np.min(chromatogram)), 
                right-left, 
                np.max(chromatogram)-np.min(chromatogram),
                linewidth=1, 
                edgecolor='orange', 
                facecolor='orange',
                alpha=0.2,
                label='Zone du pic' if idx == peak_indices[0] else ""
            )
            plt.gca().add_patch(rect)
    
    plt.title(f"Chromatogramme filtré (échantillon {sample_idx})")
    plt.xlabel("Points filtrés (x < 150)")
    plt.ylabel("Intensité normalisée")
    plt.legend()
    plt.grid(alpha=0.3)
    plt.tight_layout()
    plt.show()

# -----------------------------------------------------------
# Ajout à la partie visualisation existante
# -----------------------------------------------------------
if __name__ == "__main__":
    # [...] (le reste du code existant)
    
    # 8. Visualisation d'un chromatogramme avec ses pics
    print("\nVisualisation d'un chromatogramme exemple:")
    plot_chromatogram_with_peaks(x_batch, y_batch, sample_idx=0)
    
    # Option: Sauvegarde de la figure
    # plt.savefig('chromatogramme_avec_pics.png', dpi=300)